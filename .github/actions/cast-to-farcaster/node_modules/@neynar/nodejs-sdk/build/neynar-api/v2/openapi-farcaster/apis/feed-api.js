"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeedApi = exports.FeedApiFactory = exports.FeedApiFp = exports.FeedApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * FeedApi - axios parameter creator
 * @export
 */
const FeedApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Retrieve casts based on filters
         * @param {string} apiKey API key required for authentication.
         * @param {FeedType} feedType Defaults to following (requires fid or address). If set to filter (requires filter_type)
         * @param {FilterType} [filterType] Used when feed_type&#x3D;filter. Can be set to fids (requires fids) or parent_url (requires parent_url) or channel_id (requires channel_id)
         * @param {number} [fid] (Optional) fid of user whose feed you want to create. By default, the API expects this field, except if you pass a filter_type
         * @param {string} [fids] Used when filter_type&#x3D;fids . Create a feed based on a list of fids. Max array size is 250. Requires feed_type and filter_type.
         * @param {string} [parentUrl] Used when filter_type&#x3D;parent_url can be used to fetch content under any parent url e.g. FIP-2 channels on Warpcast. Requires feed_type and filter_type
         * @param {string} [channelId] Used when filter_type&#x3D;channel_id can be used to fetch all casts under a channel. Requires feed_type and filter_type
         * @param {string} [embedUrl] Used when filter_type&#x3D;embed_url can be used to fetch all casts with an embed url that contains embed_url. Requires feed_type and filter_type
         * @param {boolean} [withRecasts] Include recasts in the response, true by default
         * @param {number} [limit] Number of results to retrieve (default 25, max 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {number} [viewerFid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feed: async (apiKey, feedType, filterType, fid, fids, parentUrl, channelId, embedUrl, withRecasts, limit, cursor, viewerFid, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('feed', 'apiKey', apiKey);
            // verify required parameter 'feedType' is not null or undefined
            (0, common_1.assertParamExists)('feed', 'feedType', feedType);
            const localVarPath = `/farcaster/feed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (feedType !== undefined) {
                localVarQueryParameter['feed_type'] = feedType;
            }
            if (filterType !== undefined) {
                localVarQueryParameter['filter_type'] = filterType;
            }
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (fids !== undefined) {
                localVarQueryParameter['fids'] = fids;
            }
            if (parentUrl !== undefined) {
                localVarQueryParameter['parent_url'] = parentUrl;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            if (embedUrl !== undefined) {
                localVarQueryParameter['embed_url'] = embedUrl;
            }
            if (withRecasts !== undefined) {
                localVarQueryParameter['with_recasts'] = withRecasts;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (viewerFid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewerFid;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieve feed based on channel ids
         * @param {string} apiKey API key required for authentication.
         * @param {string} channelIds comma separated list of channel ids e.g. neynar,farcaster
         * @param {boolean} [withRecasts] Include recasts in the response, true by default
         * @param {number} [viewerFid]
         * @param {boolean} [withReplies] Include replies in the response, false by default
         * @param {number} [limit] Number of results to retrieve (default 25, max 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedChannels: async (apiKey, channelIds, withRecasts, viewerFid, withReplies, limit, cursor, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('feedChannels', 'apiKey', apiKey);
            // verify required parameter 'channelIds' is not null or undefined
            (0, common_1.assertParamExists)('feedChannels', 'channelIds', channelIds);
            const localVarPath = `/farcaster/feed/channels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (channelIds !== undefined) {
                localVarQueryParameter['channel_ids'] = channelIds;
            }
            if (withRecasts !== undefined) {
                localVarQueryParameter['with_recasts'] = withRecasts;
            }
            if (viewerFid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewerFid;
            }
            if (withReplies !== undefined) {
                localVarQueryParameter['with_replies'] = withReplies;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieve feed based on who a user is following
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid fid of user whose feed you want to create
         * @param {number} [viewerFid]
         * @param {boolean} [withRecasts] Include recasts in the response, true by default
         * @param {number} [limit] Number of results to retrieve (default 25, max 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedFollowing: async (apiKey, fid, viewerFid, withRecasts, limit, cursor, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('feedFollowing', 'apiKey', apiKey);
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('feedFollowing', 'fid', fid);
            const localVarPath = `/farcaster/feed/following`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (viewerFid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewerFid;
            }
            if (withRecasts !== undefined) {
                localVarQueryParameter['with_recasts'] = withRecasts;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieve feed of casts with Frames, reverse chronological order
         * @param {string} apiKey API key required for authentication.
         * @param {number} [limit] Number of results to retrieve (default 25, max 100)
         * @param {number} [viewerFid]
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedFrames: async (apiKey, limit, viewerFid, cursor, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('feedFrames', 'apiKey', apiKey);
            const localVarPath = `/farcaster/feed/frames`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (viewerFid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewerFid;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieve trending casts
         * @param {string} apiKey API key required for authentication.
         * @param {number} [limit] Number of results to retrieve (max 10)
         * @param {string} [cursor] Pagination cursor
         * @param {number} [viewerFid]
         * @param {'1h' | '6h' | '12h' | '24h'} [timeWindow] Time window for trending casts
         * @param {string} [channelId] Channel ID to filter trending casts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedTrending: async (apiKey, limit, cursor, viewerFid, timeWindow, channelId, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('feedTrending', 'apiKey', apiKey);
            const localVarPath = `/farcaster/feed/trending`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (viewerFid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewerFid;
            }
            if (timeWindow !== undefined) {
                localVarQueryParameter['time_window'] = timeWindow;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
         * @summary Retrieve 10 most popular casts for a user
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid fid of user whose feed you want to create
         * @param {number} [viewerFid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedUserPopular: async (apiKey, fid, viewerFid, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('feedUserPopular', 'apiKey', apiKey);
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('feedUserPopular', 'fid', fid);
            const localVarPath = `/farcaster/feed/user/{fid}/popular`
                .replace(`{${"fid"}}`, encodeURIComponent(String(fid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (viewerFid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewerFid;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve recent replies and recasts for a given user FID; sorted by most recent first
         * @summary Retrieve recent replies and recasts for a user
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid fid of user whose replies and recasts you want to fetch
         * @param {number} [limit] Number of results to retrieve (default 25, max 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {number} [viewerFid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedUserRepliesRecasts: async (apiKey, fid, limit, cursor, viewerFid, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('feedUserRepliesRecasts', 'apiKey', apiKey);
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('feedUserRepliesRecasts', 'fid', fid);
            const localVarPath = `/farcaster/feed/user/{fid}/replies_and_recasts`
                .replace(`{${"fid"}}`, encodeURIComponent(String(fid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (viewerFid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewerFid;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.FeedApiAxiosParamCreator = FeedApiAxiosParamCreator;
/**
 * FeedApi - functional programming interface
 * @export
 */
const FeedApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.FeedApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Retrieve casts based on filters
         * @param {string} apiKey API key required for authentication.
         * @param {FeedType} feedType Defaults to following (requires fid or address). If set to filter (requires filter_type)
         * @param {FilterType} [filterType] Used when feed_type&#x3D;filter. Can be set to fids (requires fids) or parent_url (requires parent_url) or channel_id (requires channel_id)
         * @param {number} [fid] (Optional) fid of user whose feed you want to create. By default, the API expects this field, except if you pass a filter_type
         * @param {string} [fids] Used when filter_type&#x3D;fids . Create a feed based on a list of fids. Max array size is 250. Requires feed_type and filter_type.
         * @param {string} [parentUrl] Used when filter_type&#x3D;parent_url can be used to fetch content under any parent url e.g. FIP-2 channels on Warpcast. Requires feed_type and filter_type
         * @param {string} [channelId] Used when filter_type&#x3D;channel_id can be used to fetch all casts under a channel. Requires feed_type and filter_type
         * @param {string} [embedUrl] Used when filter_type&#x3D;embed_url can be used to fetch all casts with an embed url that contains embed_url. Requires feed_type and filter_type
         * @param {boolean} [withRecasts] Include recasts in the response, true by default
         * @param {number} [limit] Number of results to retrieve (default 25, max 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {number} [viewerFid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feed(apiKey, feedType, filterType, fid, fids, parentUrl, channelId, embedUrl, withRecasts, limit, cursor, viewerFid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feed(apiKey, feedType, filterType, fid, fids, parentUrl, channelId, embedUrl, withRecasts, limit, cursor, viewerFid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Retrieve feed based on channel ids
         * @param {string} apiKey API key required for authentication.
         * @param {string} channelIds comma separated list of channel ids e.g. neynar,farcaster
         * @param {boolean} [withRecasts] Include recasts in the response, true by default
         * @param {number} [viewerFid]
         * @param {boolean} [withReplies] Include replies in the response, false by default
         * @param {number} [limit] Number of results to retrieve (default 25, max 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedChannels(apiKey, channelIds, withRecasts, viewerFid, withReplies, limit, cursor, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedChannels(apiKey, channelIds, withRecasts, viewerFid, withReplies, limit, cursor, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Retrieve feed based on who a user is following
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid fid of user whose feed you want to create
         * @param {number} [viewerFid]
         * @param {boolean} [withRecasts] Include recasts in the response, true by default
         * @param {number} [limit] Number of results to retrieve (default 25, max 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedFollowing(apiKey, fid, viewerFid, withRecasts, limit, cursor, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedFollowing(apiKey, fid, viewerFid, withRecasts, limit, cursor, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Retrieve feed of casts with Frames, reverse chronological order
         * @param {string} apiKey API key required for authentication.
         * @param {number} [limit] Number of results to retrieve (default 25, max 100)
         * @param {number} [viewerFid]
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedFrames(apiKey, limit, viewerFid, cursor, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedFrames(apiKey, limit, viewerFid, cursor, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Retrieve trending casts
         * @param {string} apiKey API key required for authentication.
         * @param {number} [limit] Number of results to retrieve (max 10)
         * @param {string} [cursor] Pagination cursor
         * @param {number} [viewerFid]
         * @param {'1h' | '6h' | '12h' | '24h'} [timeWindow] Time window for trending casts
         * @param {string} [channelId] Channel ID to filter trending casts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedTrending(apiKey, limit, cursor, viewerFid, timeWindow, channelId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedTrending(apiKey, limit, cursor, viewerFid, timeWindow, channelId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Retrieve 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
         * @summary Retrieve 10 most popular casts for a user
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid fid of user whose feed you want to create
         * @param {number} [viewerFid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedUserPopular(apiKey, fid, viewerFid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedUserPopular(apiKey, fid, viewerFid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Retrieve recent replies and recasts for a given user FID; sorted by most recent first
         * @summary Retrieve recent replies and recasts for a user
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid fid of user whose replies and recasts you want to fetch
         * @param {number} [limit] Number of results to retrieve (default 25, max 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {number} [viewerFid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedUserRepliesRecasts(apiKey, fid, limit, cursor, viewerFid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedUserRepliesRecasts(apiKey, fid, limit, cursor, viewerFid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.FeedApiFp = FeedApiFp;
/**
 * FeedApi - factory interface
 * @export
 */
const FeedApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.FeedApiFp)(configuration);
    return {
        /**
         *
         * @summary Retrieve casts based on filters
         * @param {string} apiKey API key required for authentication.
         * @param {FeedType} feedType Defaults to following (requires fid or address). If set to filter (requires filter_type)
         * @param {FilterType} [filterType] Used when feed_type&#x3D;filter. Can be set to fids (requires fids) or parent_url (requires parent_url) or channel_id (requires channel_id)
         * @param {number} [fid] (Optional) fid of user whose feed you want to create. By default, the API expects this field, except if you pass a filter_type
         * @param {string} [fids] Used when filter_type&#x3D;fids . Create a feed based on a list of fids. Max array size is 250. Requires feed_type and filter_type.
         * @param {string} [parentUrl] Used when filter_type&#x3D;parent_url can be used to fetch content under any parent url e.g. FIP-2 channels on Warpcast. Requires feed_type and filter_type
         * @param {string} [channelId] Used when filter_type&#x3D;channel_id can be used to fetch all casts under a channel. Requires feed_type and filter_type
         * @param {string} [embedUrl] Used when filter_type&#x3D;embed_url can be used to fetch all casts with an embed url that contains embed_url. Requires feed_type and filter_type
         * @param {boolean} [withRecasts] Include recasts in the response, true by default
         * @param {number} [limit] Number of results to retrieve (default 25, max 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {number} [viewerFid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feed(apiKey, feedType, filterType, fid, fids, parentUrl, channelId, embedUrl, withRecasts, limit, cursor, viewerFid, options) {
            return localVarFp.feed(apiKey, feedType, filterType, fid, fids, parentUrl, channelId, embedUrl, withRecasts, limit, cursor, viewerFid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieve feed based on channel ids
         * @param {string} apiKey API key required for authentication.
         * @param {string} channelIds comma separated list of channel ids e.g. neynar,farcaster
         * @param {boolean} [withRecasts] Include recasts in the response, true by default
         * @param {number} [viewerFid]
         * @param {boolean} [withReplies] Include replies in the response, false by default
         * @param {number} [limit] Number of results to retrieve (default 25, max 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedChannels(apiKey, channelIds, withRecasts, viewerFid, withReplies, limit, cursor, options) {
            return localVarFp.feedChannels(apiKey, channelIds, withRecasts, viewerFid, withReplies, limit, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieve feed based on who a user is following
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid fid of user whose feed you want to create
         * @param {number} [viewerFid]
         * @param {boolean} [withRecasts] Include recasts in the response, true by default
         * @param {number} [limit] Number of results to retrieve (default 25, max 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedFollowing(apiKey, fid, viewerFid, withRecasts, limit, cursor, options) {
            return localVarFp.feedFollowing(apiKey, fid, viewerFid, withRecasts, limit, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieve feed of casts with Frames, reverse chronological order
         * @param {string} apiKey API key required for authentication.
         * @param {number} [limit] Number of results to retrieve (default 25, max 100)
         * @param {number} [viewerFid]
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedFrames(apiKey, limit, viewerFid, cursor, options) {
            return localVarFp.feedFrames(apiKey, limit, viewerFid, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieve trending casts
         * @param {string} apiKey API key required for authentication.
         * @param {number} [limit] Number of results to retrieve (max 10)
         * @param {string} [cursor] Pagination cursor
         * @param {number} [viewerFid]
         * @param {'1h' | '6h' | '12h' | '24h'} [timeWindow] Time window for trending casts
         * @param {string} [channelId] Channel ID to filter trending casts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedTrending(apiKey, limit, cursor, viewerFid, timeWindow, channelId, options) {
            return localVarFp.feedTrending(apiKey, limit, cursor, viewerFid, timeWindow, channelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
         * @summary Retrieve 10 most popular casts for a user
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid fid of user whose feed you want to create
         * @param {number} [viewerFid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedUserPopular(apiKey, fid, viewerFid, options) {
            return localVarFp.feedUserPopular(apiKey, fid, viewerFid, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve recent replies and recasts for a given user FID; sorted by most recent first
         * @summary Retrieve recent replies and recasts for a user
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid fid of user whose replies and recasts you want to fetch
         * @param {number} [limit] Number of results to retrieve (default 25, max 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {number} [viewerFid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedUserRepliesRecasts(apiKey, fid, limit, cursor, viewerFid, options) {
            return localVarFp.feedUserRepliesRecasts(apiKey, fid, limit, cursor, viewerFid, options).then((request) => request(axios, basePath));
        },
    };
};
exports.FeedApiFactory = FeedApiFactory;
/**
 * FeedApi - object-oriented interface
 * @export
 * @class FeedApi
 * @extends {BaseAPI}
 */
class FeedApi extends base_1.BaseAPI {
    /**
     *
     * @summary Retrieve casts based on filters
     * @param {string} apiKey API key required for authentication.
     * @param {FeedType} feedType Defaults to following (requires fid or address). If set to filter (requires filter_type)
     * @param {FilterType} [filterType] Used when feed_type&#x3D;filter. Can be set to fids (requires fids) or parent_url (requires parent_url) or channel_id (requires channel_id)
     * @param {number} [fid] (Optional) fid of user whose feed you want to create. By default, the API expects this field, except if you pass a filter_type
     * @param {string} [fids] Used when filter_type&#x3D;fids . Create a feed based on a list of fids. Max array size is 250. Requires feed_type and filter_type.
     * @param {string} [parentUrl] Used when filter_type&#x3D;parent_url can be used to fetch content under any parent url e.g. FIP-2 channels on Warpcast. Requires feed_type and filter_type
     * @param {string} [channelId] Used when filter_type&#x3D;channel_id can be used to fetch all casts under a channel. Requires feed_type and filter_type
     * @param {string} [embedUrl] Used when filter_type&#x3D;embed_url can be used to fetch all casts with an embed url that contains embed_url. Requires feed_type and filter_type
     * @param {boolean} [withRecasts] Include recasts in the response, true by default
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    feed(apiKey, feedType, filterType, fid, fids, parentUrl, channelId, embedUrl, withRecasts, limit, cursor, viewerFid, options) {
        return (0, exports.FeedApiFp)(this.configuration).feed(apiKey, feedType, filterType, fid, fids, parentUrl, channelId, embedUrl, withRecasts, limit, cursor, viewerFid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieve feed based on channel ids
     * @param {string} apiKey API key required for authentication.
     * @param {string} channelIds comma separated list of channel ids e.g. neynar,farcaster
     * @param {boolean} [withRecasts] Include recasts in the response, true by default
     * @param {number} [viewerFid]
     * @param {boolean} [withReplies] Include replies in the response, false by default
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    feedChannels(apiKey, channelIds, withRecasts, viewerFid, withReplies, limit, cursor, options) {
        return (0, exports.FeedApiFp)(this.configuration).feedChannels(apiKey, channelIds, withRecasts, viewerFid, withReplies, limit, cursor, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieve feed based on who a user is following
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid fid of user whose feed you want to create
     * @param {number} [viewerFid]
     * @param {boolean} [withRecasts] Include recasts in the response, true by default
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    feedFollowing(apiKey, fid, viewerFid, withRecasts, limit, cursor, options) {
        return (0, exports.FeedApiFp)(this.configuration).feedFollowing(apiKey, fid, viewerFid, withRecasts, limit, cursor, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieve feed of casts with Frames, reverse chronological order
     * @param {string} apiKey API key required for authentication.
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {number} [viewerFid]
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    feedFrames(apiKey, limit, viewerFid, cursor, options) {
        return (0, exports.FeedApiFp)(this.configuration).feedFrames(apiKey, limit, viewerFid, cursor, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieve trending casts
     * @param {string} apiKey API key required for authentication.
     * @param {number} [limit] Number of results to retrieve (max 10)
     * @param {string} [cursor] Pagination cursor
     * @param {number} [viewerFid]
     * @param {'1h' | '6h' | '12h' | '24h'} [timeWindow] Time window for trending casts
     * @param {string} [channelId] Channel ID to filter trending casts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    feedTrending(apiKey, limit, cursor, viewerFid, timeWindow, channelId, options) {
        return (0, exports.FeedApiFp)(this.configuration).feedTrending(apiKey, limit, cursor, viewerFid, timeWindow, channelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
     * @summary Retrieve 10 most popular casts for a user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid fid of user whose feed you want to create
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    feedUserPopular(apiKey, fid, viewerFid, options) {
        return (0, exports.FeedApiFp)(this.configuration).feedUserPopular(apiKey, fid, viewerFid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve recent replies and recasts for a given user FID; sorted by most recent first
     * @summary Retrieve recent replies and recasts for a user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid fid of user whose replies and recasts you want to fetch
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    feedUserRepliesRecasts(apiKey, fid, limit, cursor, viewerFid, options) {
        return (0, exports.FeedApiFp)(this.configuration).feedUserRepliesRecasts(apiKey, fid, limit, cursor, viewerFid, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.FeedApi = FeedApi;
