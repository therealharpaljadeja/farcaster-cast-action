/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/base';
import { MuteListResponse } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/models';
import { MuteReqBody } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/models';
import { MuteResponse } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/models';
/**
 * MuteApi - axios parameter creator
 * @export
 */
export declare const MuteApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds a mute for a given fid. This is a whitelisted API, reach out if you want access.
     * @summary Adds a mute for a fid.
     * @param {string} apiKey API key required for authentication.
     * @param {MuteReqBody} muteReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMute: (apiKey: string, muteReqBody: MuteReqBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes a mute for a given fid. This is a whitelisted API, reach out if you want access.
     * @summary Deletes a mute for a fid.
     * @param {string} apiKey API key required for authentication.
     * @param {MuteReqBody} muteReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMute: (apiKey: string, muteReqBody: MuteReqBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches all fids that a user has muted.
     * @summary Get fids that a user has muted.
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid The user\&#39;s fid (identifier)
     * @param {number} [limit] Number of results to retrieve (default 20, max 100).
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    muteList: (apiKey: string, fid: number, limit?: number, cursor?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * MuteApi - functional programming interface
 * @export
 */
export declare const MuteApiFp: (configuration?: Configuration) => {
    /**
     * Adds a mute for a given fid. This is a whitelisted API, reach out if you want access.
     * @summary Adds a mute for a fid.
     * @param {string} apiKey API key required for authentication.
     * @param {MuteReqBody} muteReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMute(apiKey: string, muteReqBody: MuteReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MuteResponse>>;
    /**
     * Deletes a mute for a given fid. This is a whitelisted API, reach out if you want access.
     * @summary Deletes a mute for a fid.
     * @param {string} apiKey API key required for authentication.
     * @param {MuteReqBody} muteReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMute(apiKey: string, muteReqBody: MuteReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MuteResponse>>;
    /**
     * Fetches all fids that a user has muted.
     * @summary Get fids that a user has muted.
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid The user\&#39;s fid (identifier)
     * @param {number} [limit] Number of results to retrieve (default 20, max 100).
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    muteList(apiKey: string, fid: number, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MuteListResponse>>;
};
/**
 * MuteApi - factory interface
 * @export
 */
export declare const MuteApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds a mute for a given fid. This is a whitelisted API, reach out if you want access.
     * @summary Adds a mute for a fid.
     * @param {string} apiKey API key required for authentication.
     * @param {MuteReqBody} muteReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMute(apiKey: string, muteReqBody: MuteReqBody, options?: any): AxiosPromise<MuteResponse>;
    /**
     * Deletes a mute for a given fid. This is a whitelisted API, reach out if you want access.
     * @summary Deletes a mute for a fid.
     * @param {string} apiKey API key required for authentication.
     * @param {MuteReqBody} muteReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMute(apiKey: string, muteReqBody: MuteReqBody, options?: any): AxiosPromise<MuteResponse>;
    /**
     * Fetches all fids that a user has muted.
     * @summary Get fids that a user has muted.
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid The user\&#39;s fid (identifier)
     * @param {number} [limit] Number of results to retrieve (default 20, max 100).
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    muteList(apiKey: string, fid: number, limit?: number, cursor?: string, options?: any): AxiosPromise<MuteListResponse>;
};
/**
 * MuteApi - object-oriented interface
 * @export
 * @class MuteApi
 * @extends {BaseAPI}
 */
export declare class MuteApi extends BaseAPI {
    /**
     * Adds a mute for a given fid. This is a whitelisted API, reach out if you want access.
     * @summary Adds a mute for a fid.
     * @param {string} apiKey API key required for authentication.
     * @param {MuteReqBody} muteReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MuteApi
     */
    addMute(apiKey: string, muteReqBody: MuteReqBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MuteResponse, any>>;
    /**
     * Deletes a mute for a given fid. This is a whitelisted API, reach out if you want access.
     * @summary Deletes a mute for a fid.
     * @param {string} apiKey API key required for authentication.
     * @param {MuteReqBody} muteReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MuteApi
     */
    deleteMute(apiKey: string, muteReqBody: MuteReqBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MuteResponse, any>>;
    /**
     * Fetches all fids that a user has muted.
     * @summary Get fids that a user has muted.
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid The user\&#39;s fid (identifier)
     * @param {number} [limit] Number of results to retrieve (default 20, max 100).
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MuteApi
     */
    muteList(apiKey: string, fid: number, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MuteListResponse, any>>;
}
