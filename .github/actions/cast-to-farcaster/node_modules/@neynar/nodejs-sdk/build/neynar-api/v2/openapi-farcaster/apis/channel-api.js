"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelApi = exports.ChannelApiFactory = exports.ChannelApiFp = exports.ChannelApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ChannelApi - axios parameter creator
 * @export
 */
const ChannelApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Fetches all channels that a user has casted in, in reverse chronological order.
         * @summary Get channels that a user is active in
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid The user\&#39;s fid (identifier)
         * @param {number} [limit] Number of results to retrieve (default 20, max 100).
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activeChannels: async (apiKey, fid, limit, cursor, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('activeChannels', 'apiKey', apiKey);
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('activeChannels', 'fid', fid);
            const localVarPath = `/farcaster/channel/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns details of a channel
         * @summary Retrieve channel details by id
         * @param {string} apiKey API key required for authentication.
         * @param {string} id Channel ID for the channel being queried
         * @param {number} [viewerFid] FID of the user viewing the channel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelDetails: async (apiKey, id, viewerFid, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('channelDetails', 'apiKey', apiKey);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('channelDetails', 'id', id);
            const localVarPath = `/farcaster/channel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (viewerFid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewerFid;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of followers for a specific channel. Max limit is 1000. Use cursor for pagination.
         * @summary Retrieve followers for a given channel
         * @param {string} apiKey API key required for authentication.
         * @param {string} id Channel ID for the channel being queried
         * @param {string} [cursor] Pagination cursor.
         * @param {number} [limit] Number of followers to retrieve (default 25, max 1000)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelFollowers: async (apiKey, id, cursor, limit, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('channelFollowers', 'apiKey', apiKey);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('channelFollowers', 'id', id);
            const localVarPath = `/farcaster/channel/followers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of users who are active in a given channel, ordered by ascending FIDs
         * @summary Retrieve users who are active in a channel
         * @param {string} apiKey API key required for authentication.
         * @param {string} id Channel ID for the channel being queried
         * @param {boolean} hasRootCastAuthors Include users who posted the root cast in the channel
         * @param {boolean} [hasCastLikers] Include users who liked a cast in the channel
         * @param {boolean} [hasCastRecasters] Include users who recasted a cast in the channel
         * @param {boolean} [hasReplyAuthors] Include users who replied to a cast in the channel
         * @param {string} [cursor] Pagination cursor.
         * @param {number} [limit] Number of results to retrieve (default 25, max 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelUsers: async (apiKey, id, hasRootCastAuthors, hasCastLikers, hasCastRecasters, hasReplyAuthors, cursor, limit, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('channelUsers', 'apiKey', apiKey);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('channelUsers', 'id', id);
            // verify required parameter 'hasRootCastAuthors' is not null or undefined
            (0, common_1.assertParamExists)('channelUsers', 'hasRootCastAuthors', hasRootCastAuthors);
            const localVarPath = `/farcaster/channel/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (hasRootCastAuthors !== undefined) {
                localVarQueryParameter['has_root_cast_authors'] = hasRootCastAuthors;
            }
            if (hasCastLikers !== undefined) {
                localVarQueryParameter['has_cast_likers'] = hasCastLikers;
            }
            if (hasCastRecasters !== undefined) {
                localVarQueryParameter['has_cast_recasters'] = hasCastRecasters;
            }
            if (hasReplyAuthors !== undefined) {
                localVarQueryParameter['has_reply_authors'] = hasReplyAuthors;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all channels with their details
         * @summary Retrieve all channels with their details
         * @param {string} apiKey API key required for authentication.
         * @param {number} [limit] Number of results to retrieve (default 25, max 50)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllChannels: async (apiKey, limit, cursor, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('listAllChannels', 'apiKey', apiKey);
            const localVarPath = `/farcaster/channel/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of channels based on id or name
         * @summary Search for channels based on id or name
         * @param {string} apiKey API key required for authentication.
         * @param {string} q Channel ID or name for the channel being queried
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchChannels: async (apiKey, q, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('searchChannels', 'apiKey', apiKey);
            // verify required parameter 'q' is not null or undefined
            (0, common_1.assertParamExists)('searchChannels', 'q', q);
            const localVarPath = `/farcaster/channel/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of trending channels based on activity
         * @summary Retrieve trending channels based on activity
         * @param {string} apiKey API key required for authentication.
         * @param {'1d' | '7d' | '30d'} [timeWindow]
         * @param {number} [limit] Number of results to retrieve (default 10, max 25)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trendingChannels: async (apiKey, timeWindow, limit, cursor, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('trendingChannels', 'apiKey', apiKey);
            const localVarPath = `/farcaster/channel/trending`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (timeWindow !== undefined) {
                localVarQueryParameter['time_window'] = timeWindow;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all channels with their details that a fid follows.
         * @summary Retrieve all channels that a given fid follows
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid The fid of the user.
         * @param {number} [limit] Number of results to retrieve (default 25, max 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userChannels: async (apiKey, fid, limit, cursor, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('userChannels', 'apiKey', apiKey);
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('userChannels', 'fid', fid);
            const localVarPath = `/farcaster/user/channels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ChannelApiAxiosParamCreator = ChannelApiAxiosParamCreator;
/**
 * ChannelApi - functional programming interface
 * @export
 */
const ChannelApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ChannelApiAxiosParamCreator)(configuration);
    return {
        /**
         * Fetches all channels that a user has casted in, in reverse chronological order.
         * @summary Get channels that a user is active in
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid The user\&#39;s fid (identifier)
         * @param {number} [limit] Number of results to retrieve (default 20, max 100).
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activeChannels(apiKey, fid, limit, cursor, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activeChannels(apiKey, fid, limit, cursor, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Returns details of a channel
         * @summary Retrieve channel details by id
         * @param {string} apiKey API key required for authentication.
         * @param {string} id Channel ID for the channel being queried
         * @param {number} [viewerFid] FID of the user viewing the channel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelDetails(apiKey, id, viewerFid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelDetails(apiKey, id, viewerFid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Returns a list of followers for a specific channel. Max limit is 1000. Use cursor for pagination.
         * @summary Retrieve followers for a given channel
         * @param {string} apiKey API key required for authentication.
         * @param {string} id Channel ID for the channel being queried
         * @param {string} [cursor] Pagination cursor.
         * @param {number} [limit] Number of followers to retrieve (default 25, max 1000)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelFollowers(apiKey, id, cursor, limit, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelFollowers(apiKey, id, cursor, limit, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Returns a list of users who are active in a given channel, ordered by ascending FIDs
         * @summary Retrieve users who are active in a channel
         * @param {string} apiKey API key required for authentication.
         * @param {string} id Channel ID for the channel being queried
         * @param {boolean} hasRootCastAuthors Include users who posted the root cast in the channel
         * @param {boolean} [hasCastLikers] Include users who liked a cast in the channel
         * @param {boolean} [hasCastRecasters] Include users who recasted a cast in the channel
         * @param {boolean} [hasReplyAuthors] Include users who replied to a cast in the channel
         * @param {string} [cursor] Pagination cursor.
         * @param {number} [limit] Number of results to retrieve (default 25, max 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelUsers(apiKey, id, hasRootCastAuthors, hasCastLikers, hasCastRecasters, hasReplyAuthors, cursor, limit, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelUsers(apiKey, id, hasRootCastAuthors, hasCastLikers, hasCastRecasters, hasReplyAuthors, cursor, limit, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Returns a list of all channels with their details
         * @summary Retrieve all channels with their details
         * @param {string} apiKey API key required for authentication.
         * @param {number} [limit] Number of results to retrieve (default 25, max 50)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllChannels(apiKey, limit, cursor, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllChannels(apiKey, limit, cursor, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Returns a list of channels based on id or name
         * @summary Search for channels based on id or name
         * @param {string} apiKey API key required for authentication.
         * @param {string} q Channel ID or name for the channel being queried
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchChannels(apiKey, q, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchChannels(apiKey, q, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Returns a list of trending channels based on activity
         * @summary Retrieve trending channels based on activity
         * @param {string} apiKey API key required for authentication.
         * @param {'1d' | '7d' | '30d'} [timeWindow]
         * @param {number} [limit] Number of results to retrieve (default 10, max 25)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trendingChannels(apiKey, timeWindow, limit, cursor, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trendingChannels(apiKey, timeWindow, limit, cursor, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Returns a list of all channels with their details that a fid follows.
         * @summary Retrieve all channels that a given fid follows
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid The fid of the user.
         * @param {number} [limit] Number of results to retrieve (default 25, max 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userChannels(apiKey, fid, limit, cursor, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userChannels(apiKey, fid, limit, cursor, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.ChannelApiFp = ChannelApiFp;
/**
 * ChannelApi - factory interface
 * @export
 */
const ChannelApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ChannelApiFp)(configuration);
    return {
        /**
         * Fetches all channels that a user has casted in, in reverse chronological order.
         * @summary Get channels that a user is active in
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid The user\&#39;s fid (identifier)
         * @param {number} [limit] Number of results to retrieve (default 20, max 100).
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activeChannels(apiKey, fid, limit, cursor, options) {
            return localVarFp.activeChannels(apiKey, fid, limit, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns details of a channel
         * @summary Retrieve channel details by id
         * @param {string} apiKey API key required for authentication.
         * @param {string} id Channel ID for the channel being queried
         * @param {number} [viewerFid] FID of the user viewing the channel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelDetails(apiKey, id, viewerFid, options) {
            return localVarFp.channelDetails(apiKey, id, viewerFid, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of followers for a specific channel. Max limit is 1000. Use cursor for pagination.
         * @summary Retrieve followers for a given channel
         * @param {string} apiKey API key required for authentication.
         * @param {string} id Channel ID for the channel being queried
         * @param {string} [cursor] Pagination cursor.
         * @param {number} [limit] Number of followers to retrieve (default 25, max 1000)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelFollowers(apiKey, id, cursor, limit, options) {
            return localVarFp.channelFollowers(apiKey, id, cursor, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of users who are active in a given channel, ordered by ascending FIDs
         * @summary Retrieve users who are active in a channel
         * @param {string} apiKey API key required for authentication.
         * @param {string} id Channel ID for the channel being queried
         * @param {boolean} hasRootCastAuthors Include users who posted the root cast in the channel
         * @param {boolean} [hasCastLikers] Include users who liked a cast in the channel
         * @param {boolean} [hasCastRecasters] Include users who recasted a cast in the channel
         * @param {boolean} [hasReplyAuthors] Include users who replied to a cast in the channel
         * @param {string} [cursor] Pagination cursor.
         * @param {number} [limit] Number of results to retrieve (default 25, max 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelUsers(apiKey, id, hasRootCastAuthors, hasCastLikers, hasCastRecasters, hasReplyAuthors, cursor, limit, options) {
            return localVarFp.channelUsers(apiKey, id, hasRootCastAuthors, hasCastLikers, hasCastRecasters, hasReplyAuthors, cursor, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all channels with their details
         * @summary Retrieve all channels with their details
         * @param {string} apiKey API key required for authentication.
         * @param {number} [limit] Number of results to retrieve (default 25, max 50)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllChannels(apiKey, limit, cursor, options) {
            return localVarFp.listAllChannels(apiKey, limit, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of channels based on id or name
         * @summary Search for channels based on id or name
         * @param {string} apiKey API key required for authentication.
         * @param {string} q Channel ID or name for the channel being queried
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchChannels(apiKey, q, options) {
            return localVarFp.searchChannels(apiKey, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of trending channels based on activity
         * @summary Retrieve trending channels based on activity
         * @param {string} apiKey API key required for authentication.
         * @param {'1d' | '7d' | '30d'} [timeWindow]
         * @param {number} [limit] Number of results to retrieve (default 10, max 25)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trendingChannels(apiKey, timeWindow, limit, cursor, options) {
            return localVarFp.trendingChannels(apiKey, timeWindow, limit, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all channels with their details that a fid follows.
         * @summary Retrieve all channels that a given fid follows
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid The fid of the user.
         * @param {number} [limit] Number of results to retrieve (default 25, max 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userChannels(apiKey, fid, limit, cursor, options) {
            return localVarFp.userChannels(apiKey, fid, limit, cursor, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ChannelApiFactory = ChannelApiFactory;
/**
 * ChannelApi - object-oriented interface
 * @export
 * @class ChannelApi
 * @extends {BaseAPI}
 */
class ChannelApi extends base_1.BaseAPI {
    /**
     * Fetches all channels that a user has casted in, in reverse chronological order.
     * @summary Get channels that a user is active in
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid The user\&#39;s fid (identifier)
     * @param {number} [limit] Number of results to retrieve (default 20, max 100).
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    activeChannels(apiKey, fid, limit, cursor, options) {
        return (0, exports.ChannelApiFp)(this.configuration).activeChannels(apiKey, fid, limit, cursor, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns details of a channel
     * @summary Retrieve channel details by id
     * @param {string} apiKey API key required for authentication.
     * @param {string} id Channel ID for the channel being queried
     * @param {number} [viewerFid] FID of the user viewing the channel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelDetails(apiKey, id, viewerFid, options) {
        return (0, exports.ChannelApiFp)(this.configuration).channelDetails(apiKey, id, viewerFid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of followers for a specific channel. Max limit is 1000. Use cursor for pagination.
     * @summary Retrieve followers for a given channel
     * @param {string} apiKey API key required for authentication.
     * @param {string} id Channel ID for the channel being queried
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [limit] Number of followers to retrieve (default 25, max 1000)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelFollowers(apiKey, id, cursor, limit, options) {
        return (0, exports.ChannelApiFp)(this.configuration).channelFollowers(apiKey, id, cursor, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of users who are active in a given channel, ordered by ascending FIDs
     * @summary Retrieve users who are active in a channel
     * @param {string} apiKey API key required for authentication.
     * @param {string} id Channel ID for the channel being queried
     * @param {boolean} hasRootCastAuthors Include users who posted the root cast in the channel
     * @param {boolean} [hasCastLikers] Include users who liked a cast in the channel
     * @param {boolean} [hasCastRecasters] Include users who recasted a cast in the channel
     * @param {boolean} [hasReplyAuthors] Include users who replied to a cast in the channel
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelUsers(apiKey, id, hasRootCastAuthors, hasCastLikers, hasCastRecasters, hasReplyAuthors, cursor, limit, options) {
        return (0, exports.ChannelApiFp)(this.configuration).channelUsers(apiKey, id, hasRootCastAuthors, hasCastLikers, hasCastRecasters, hasReplyAuthors, cursor, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of all channels with their details
     * @summary Retrieve all channels with their details
     * @param {string} apiKey API key required for authentication.
     * @param {number} [limit] Number of results to retrieve (default 25, max 50)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    listAllChannels(apiKey, limit, cursor, options) {
        return (0, exports.ChannelApiFp)(this.configuration).listAllChannels(apiKey, limit, cursor, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of channels based on id or name
     * @summary Search for channels based on id or name
     * @param {string} apiKey API key required for authentication.
     * @param {string} q Channel ID or name for the channel being queried
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    searchChannels(apiKey, q, options) {
        return (0, exports.ChannelApiFp)(this.configuration).searchChannels(apiKey, q, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of trending channels based on activity
     * @summary Retrieve trending channels based on activity
     * @param {string} apiKey API key required for authentication.
     * @param {'1d' | '7d' | '30d'} [timeWindow]
     * @param {number} [limit] Number of results to retrieve (default 10, max 25)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    trendingChannels(apiKey, timeWindow, limit, cursor, options) {
        return (0, exports.ChannelApiFp)(this.configuration).trendingChannels(apiKey, timeWindow, limit, cursor, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of all channels with their details that a fid follows.
     * @summary Retrieve all channels that a given fid follows
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid The fid of the user.
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    userChannels(apiKey, fid, limit, cursor, options) {
        return (0, exports.ChannelApiFp)(this.configuration).userChannels(apiKey, fid, limit, cursor, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ChannelApi = ChannelApi;
