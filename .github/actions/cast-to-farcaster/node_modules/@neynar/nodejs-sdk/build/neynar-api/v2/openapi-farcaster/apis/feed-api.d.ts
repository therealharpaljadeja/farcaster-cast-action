/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { BulkCastsResponse } from '../models';
import { FeedResponse } from '../models';
import { FeedType } from '../models';
import { FilterType } from '../models';
/**
 * FeedApi - axios parameter creator
 * @export
 */
export declare const FeedApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieve casts based on filters
     * @param {string} apiKey API key required for authentication.
     * @param {FeedType} feedType Defaults to following (requires fid or address). If set to filter (requires filter_type)
     * @param {FilterType} [filterType] Used when feed_type&#x3D;filter. Can be set to fids (requires fids) or parent_url (requires parent_url) or channel_id (requires channel_id)
     * @param {number} [fid] (Optional) fid of user whose feed you want to create. By default, the API expects this field, except if you pass a filter_type
     * @param {string} [fids] Used when filter_type&#x3D;fids . Create a feed based on a list of fids. Max array size is 250. Requires feed_type and filter_type.
     * @param {string} [parentUrl] Used when filter_type&#x3D;parent_url can be used to fetch content under any parent url e.g. FIP-2 channels on Warpcast. Requires feed_type and filter_type
     * @param {string} [channelId] Used when filter_type&#x3D;channel_id can be used to fetch all casts under a channel. Requires feed_type and filter_type
     * @param {string} [embedUrl] Used when filter_type&#x3D;embed_url can be used to fetch all casts with an embed url that contains embed_url. Requires feed_type and filter_type
     * @param {boolean} [withRecasts] Include recasts in the response, true by default
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feed: (apiKey: string, feedType: FeedType, filterType?: FilterType, fid?: number, fids?: string, parentUrl?: string, channelId?: string, embedUrl?: string, withRecasts?: boolean, limit?: number, cursor?: string, viewerFid?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve feed based on channel ids
     * @param {string} apiKey API key required for authentication.
     * @param {string} channelIds comma separated list of channel ids e.g. neynar,farcaster
     * @param {boolean} [withRecasts] Include recasts in the response, true by default
     * @param {number} [viewerFid]
     * @param {boolean} [withReplies] Include replies in the response, false by default
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedChannels: (apiKey: string, channelIds: string, withRecasts?: boolean, viewerFid?: number, withReplies?: boolean, limit?: number, cursor?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve feed based on who a user is following
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid fid of user whose feed you want to create
     * @param {number} [viewerFid]
     * @param {boolean} [withRecasts] Include recasts in the response, true by default
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedFollowing: (apiKey: string, fid: number, viewerFid?: number, withRecasts?: boolean, limit?: number, cursor?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve feed of casts with Frames, reverse chronological order
     * @param {string} apiKey API key required for authentication.
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {number} [viewerFid]
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedFrames: (apiKey: string, limit?: number, viewerFid?: number, cursor?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve trending casts
     * @param {string} apiKey API key required for authentication.
     * @param {number} [limit] Number of results to retrieve (max 10)
     * @param {string} [cursor] Pagination cursor
     * @param {number} [viewerFid]
     * @param {'1h' | '6h' | '12h' | '24h'} [timeWindow] Time window for trending casts
     * @param {string} [channelId] Channel ID to filter trending casts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedTrending: (apiKey: string, limit?: number, cursor?: string, viewerFid?: number, timeWindow?: '1h' | '6h' | '12h' | '24h', channelId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
     * @summary Retrieve 10 most popular casts for a user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid fid of user whose feed you want to create
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedUserPopular: (apiKey: string, fid: number, viewerFid?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve recent replies and recasts for a given user FID; sorted by most recent first
     * @summary Retrieve recent replies and recasts for a user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid fid of user whose replies and recasts you want to fetch
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedUserRepliesRecasts: (apiKey: string, fid: number, limit?: number, cursor?: string, viewerFid?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FeedApi - functional programming interface
 * @export
 */
export declare const FeedApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieve casts based on filters
     * @param {string} apiKey API key required for authentication.
     * @param {FeedType} feedType Defaults to following (requires fid or address). If set to filter (requires filter_type)
     * @param {FilterType} [filterType] Used when feed_type&#x3D;filter. Can be set to fids (requires fids) or parent_url (requires parent_url) or channel_id (requires channel_id)
     * @param {number} [fid] (Optional) fid of user whose feed you want to create. By default, the API expects this field, except if you pass a filter_type
     * @param {string} [fids] Used when filter_type&#x3D;fids . Create a feed based on a list of fids. Max array size is 250. Requires feed_type and filter_type.
     * @param {string} [parentUrl] Used when filter_type&#x3D;parent_url can be used to fetch content under any parent url e.g. FIP-2 channels on Warpcast. Requires feed_type and filter_type
     * @param {string} [channelId] Used when filter_type&#x3D;channel_id can be used to fetch all casts under a channel. Requires feed_type and filter_type
     * @param {string} [embedUrl] Used when filter_type&#x3D;embed_url can be used to fetch all casts with an embed url that contains embed_url. Requires feed_type and filter_type
     * @param {boolean} [withRecasts] Include recasts in the response, true by default
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feed(apiKey: string, feedType: FeedType, filterType?: FilterType, fid?: number, fids?: string, parentUrl?: string, channelId?: string, embedUrl?: string, withRecasts?: boolean, limit?: number, cursor?: string, viewerFid?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>>;
    /**
     *
     * @summary Retrieve feed based on channel ids
     * @param {string} apiKey API key required for authentication.
     * @param {string} channelIds comma separated list of channel ids e.g. neynar,farcaster
     * @param {boolean} [withRecasts] Include recasts in the response, true by default
     * @param {number} [viewerFid]
     * @param {boolean} [withReplies] Include replies in the response, false by default
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedChannels(apiKey: string, channelIds: string, withRecasts?: boolean, viewerFid?: number, withReplies?: boolean, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>>;
    /**
     *
     * @summary Retrieve feed based on who a user is following
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid fid of user whose feed you want to create
     * @param {number} [viewerFid]
     * @param {boolean} [withRecasts] Include recasts in the response, true by default
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedFollowing(apiKey: string, fid: number, viewerFid?: number, withRecasts?: boolean, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>>;
    /**
     *
     * @summary Retrieve feed of casts with Frames, reverse chronological order
     * @param {string} apiKey API key required for authentication.
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {number} [viewerFid]
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedFrames(apiKey: string, limit?: number, viewerFid?: number, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>>;
    /**
     *
     * @summary Retrieve trending casts
     * @param {string} apiKey API key required for authentication.
     * @param {number} [limit] Number of results to retrieve (max 10)
     * @param {string} [cursor] Pagination cursor
     * @param {number} [viewerFid]
     * @param {'1h' | '6h' | '12h' | '24h'} [timeWindow] Time window for trending casts
     * @param {string} [channelId] Channel ID to filter trending casts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedTrending(apiKey: string, limit?: number, cursor?: string, viewerFid?: number, timeWindow?: '1h' | '6h' | '12h' | '24h', channelId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>>;
    /**
     * Retrieve 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
     * @summary Retrieve 10 most popular casts for a user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid fid of user whose feed you want to create
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedUserPopular(apiKey: string, fid: number, viewerFid?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkCastsResponse>>;
    /**
     * Retrieve recent replies and recasts for a given user FID; sorted by most recent first
     * @summary Retrieve recent replies and recasts for a user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid fid of user whose replies and recasts you want to fetch
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedUserRepliesRecasts(apiKey: string, fid: number, limit?: number, cursor?: string, viewerFid?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>>;
};
/**
 * FeedApi - factory interface
 * @export
 */
export declare const FeedApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Retrieve casts based on filters
     * @param {string} apiKey API key required for authentication.
     * @param {FeedType} feedType Defaults to following (requires fid or address). If set to filter (requires filter_type)
     * @param {FilterType} [filterType] Used when feed_type&#x3D;filter. Can be set to fids (requires fids) or parent_url (requires parent_url) or channel_id (requires channel_id)
     * @param {number} [fid] (Optional) fid of user whose feed you want to create. By default, the API expects this field, except if you pass a filter_type
     * @param {string} [fids] Used when filter_type&#x3D;fids . Create a feed based on a list of fids. Max array size is 250. Requires feed_type and filter_type.
     * @param {string} [parentUrl] Used when filter_type&#x3D;parent_url can be used to fetch content under any parent url e.g. FIP-2 channels on Warpcast. Requires feed_type and filter_type
     * @param {string} [channelId] Used when filter_type&#x3D;channel_id can be used to fetch all casts under a channel. Requires feed_type and filter_type
     * @param {string} [embedUrl] Used when filter_type&#x3D;embed_url can be used to fetch all casts with an embed url that contains embed_url. Requires feed_type and filter_type
     * @param {boolean} [withRecasts] Include recasts in the response, true by default
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feed(apiKey: string, feedType: FeedType, filterType?: FilterType, fid?: number, fids?: string, parentUrl?: string, channelId?: string, embedUrl?: string, withRecasts?: boolean, limit?: number, cursor?: string, viewerFid?: number, options?: any): AxiosPromise<FeedResponse>;
    /**
     *
     * @summary Retrieve feed based on channel ids
     * @param {string} apiKey API key required for authentication.
     * @param {string} channelIds comma separated list of channel ids e.g. neynar,farcaster
     * @param {boolean} [withRecasts] Include recasts in the response, true by default
     * @param {number} [viewerFid]
     * @param {boolean} [withReplies] Include replies in the response, false by default
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedChannels(apiKey: string, channelIds: string, withRecasts?: boolean, viewerFid?: number, withReplies?: boolean, limit?: number, cursor?: string, options?: any): AxiosPromise<FeedResponse>;
    /**
     *
     * @summary Retrieve feed based on who a user is following
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid fid of user whose feed you want to create
     * @param {number} [viewerFid]
     * @param {boolean} [withRecasts] Include recasts in the response, true by default
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedFollowing(apiKey: string, fid: number, viewerFid?: number, withRecasts?: boolean, limit?: number, cursor?: string, options?: any): AxiosPromise<FeedResponse>;
    /**
     *
     * @summary Retrieve feed of casts with Frames, reverse chronological order
     * @param {string} apiKey API key required for authentication.
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {number} [viewerFid]
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedFrames(apiKey: string, limit?: number, viewerFid?: number, cursor?: string, options?: any): AxiosPromise<FeedResponse>;
    /**
     *
     * @summary Retrieve trending casts
     * @param {string} apiKey API key required for authentication.
     * @param {number} [limit] Number of results to retrieve (max 10)
     * @param {string} [cursor] Pagination cursor
     * @param {number} [viewerFid]
     * @param {'1h' | '6h' | '12h' | '24h'} [timeWindow] Time window for trending casts
     * @param {string} [channelId] Channel ID to filter trending casts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedTrending(apiKey: string, limit?: number, cursor?: string, viewerFid?: number, timeWindow?: '1h' | '6h' | '12h' | '24h', channelId?: string, options?: any): AxiosPromise<FeedResponse>;
    /**
     * Retrieve 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
     * @summary Retrieve 10 most popular casts for a user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid fid of user whose feed you want to create
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedUserPopular(apiKey: string, fid: number, viewerFid?: number, options?: any): AxiosPromise<BulkCastsResponse>;
    /**
     * Retrieve recent replies and recasts for a given user FID; sorted by most recent first
     * @summary Retrieve recent replies and recasts for a user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid fid of user whose replies and recasts you want to fetch
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedUserRepliesRecasts(apiKey: string, fid: number, limit?: number, cursor?: string, viewerFid?: number, options?: any): AxiosPromise<FeedResponse>;
};
/**
 * FeedApi - object-oriented interface
 * @export
 * @class FeedApi
 * @extends {BaseAPI}
 */
export declare class FeedApi extends BaseAPI {
    /**
     *
     * @summary Retrieve casts based on filters
     * @param {string} apiKey API key required for authentication.
     * @param {FeedType} feedType Defaults to following (requires fid or address). If set to filter (requires filter_type)
     * @param {FilterType} [filterType] Used when feed_type&#x3D;filter. Can be set to fids (requires fids) or parent_url (requires parent_url) or channel_id (requires channel_id)
     * @param {number} [fid] (Optional) fid of user whose feed you want to create. By default, the API expects this field, except if you pass a filter_type
     * @param {string} [fids] Used when filter_type&#x3D;fids . Create a feed based on a list of fids. Max array size is 250. Requires feed_type and filter_type.
     * @param {string} [parentUrl] Used when filter_type&#x3D;parent_url can be used to fetch content under any parent url e.g. FIP-2 channels on Warpcast. Requires feed_type and filter_type
     * @param {string} [channelId] Used when filter_type&#x3D;channel_id can be used to fetch all casts under a channel. Requires feed_type and filter_type
     * @param {string} [embedUrl] Used when filter_type&#x3D;embed_url can be used to fetch all casts with an embed url that contains embed_url. Requires feed_type and filter_type
     * @param {boolean} [withRecasts] Include recasts in the response, true by default
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    feed(apiKey: string, feedType: FeedType, filterType?: FilterType, fid?: number, fids?: string, parentUrl?: string, channelId?: string, embedUrl?: string, withRecasts?: boolean, limit?: number, cursor?: string, viewerFid?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedResponse, any>>;
    /**
     *
     * @summary Retrieve feed based on channel ids
     * @param {string} apiKey API key required for authentication.
     * @param {string} channelIds comma separated list of channel ids e.g. neynar,farcaster
     * @param {boolean} [withRecasts] Include recasts in the response, true by default
     * @param {number} [viewerFid]
     * @param {boolean} [withReplies] Include replies in the response, false by default
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    feedChannels(apiKey: string, channelIds: string, withRecasts?: boolean, viewerFid?: number, withReplies?: boolean, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedResponse, any>>;
    /**
     *
     * @summary Retrieve feed based on who a user is following
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid fid of user whose feed you want to create
     * @param {number} [viewerFid]
     * @param {boolean} [withRecasts] Include recasts in the response, true by default
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    feedFollowing(apiKey: string, fid: number, viewerFid?: number, withRecasts?: boolean, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedResponse, any>>;
    /**
     *
     * @summary Retrieve feed of casts with Frames, reverse chronological order
     * @param {string} apiKey API key required for authentication.
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {number} [viewerFid]
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    feedFrames(apiKey: string, limit?: number, viewerFid?: number, cursor?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedResponse, any>>;
    /**
     *
     * @summary Retrieve trending casts
     * @param {string} apiKey API key required for authentication.
     * @param {number} [limit] Number of results to retrieve (max 10)
     * @param {string} [cursor] Pagination cursor
     * @param {number} [viewerFid]
     * @param {'1h' | '6h' | '12h' | '24h'} [timeWindow] Time window for trending casts
     * @param {string} [channelId] Channel ID to filter trending casts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    feedTrending(apiKey: string, limit?: number, cursor?: string, viewerFid?: number, timeWindow?: '1h' | '6h' | '12h' | '24h', channelId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedResponse, any>>;
    /**
     * Retrieve 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
     * @summary Retrieve 10 most popular casts for a user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid fid of user whose feed you want to create
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    feedUserPopular(apiKey: string, fid: number, viewerFid?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BulkCastsResponse, any>>;
    /**
     * Retrieve recent replies and recasts for a given user FID; sorted by most recent first
     * @summary Retrieve recent replies and recasts for a user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid fid of user whose replies and recasts you want to fetch
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    feedUserRepliesRecasts(apiKey: string, fid: number, limit?: number, cursor?: string, viewerFid?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedResponse, any>>;
}
