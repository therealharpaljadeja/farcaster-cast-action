/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AddVerificationReqBody } from '../models';
import { BulkFollowResponse } from '../models';
import { BulkUsersResponse } from '../models';
import { FollowReqBody } from '../models';
import { OperationResponse } from '../models';
import { RegisterUserReqBody } from '../models';
import { RegisterUserResponse } from '../models';
import { RemoveVerificationReqBody } from '../models';
import { UpdateUserReqBody } from '../models';
import { User } from '../models';
import { UserFIDResponse } from '../models';
import { UserResponse } from '../models';
import { UserSearchResponse } from '../models';
import { UsersResponse } from '../models';
/**
 * UserApi - axios parameter creator
 * @export
 */
export declare const UserApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Fetches active users based on Warpcast active algorithm, information is updated every 12 hours
     * @summary Fetch active users
     * @param {string} apiKey API key required for authentication.
     * @param {number} [limit]
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activeUsers: (apiKey: string, limit?: number, cursor?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Removes verification for an eth address for the user \\ (In order to delete verification `signer_uuid` must be approved)
     * @summary Removes verification for an eth address for the user
     * @param {string} apiKey API key required for authentication.
     * @param {RemoveVerificationReqBody} removeVerificationReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    farcasterUserVerificationDelete: (apiKey: string, removeVerificationReqBody: RemoveVerificationReqBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Adds verification for an eth address for the user \\ (In order to add verification `signer_uuid` must be approved)
     * @summary Adds verification for an eth address for the user
     * @param {string} apiKey API key required for authentication.
     * @param {AddVerificationReqBody} addVerificationReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    farcasterUserVerificationPost: (apiKey: string, addVerificationReqBody: AddVerificationReqBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Follow a user \\ (In order to follow a user `signer_uuid` must be approved)
     * @summary Follow a user
     * @param {string} apiKey API key required for authentication.
     * @param {FollowReqBody} followReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followUser: (apiKey: string, followReqBody: FollowReqBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches fid to assign it new user
     * @summary Fetches fid to assign it new user
     * @param {string} apiKey API key required for authentication.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFreshFid: (apiKey: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lookup a user by custody-address
     * @summary Lookup a user by custody-address
     * @param {string} apiKey API key required for authentication.
     * @param {string} custodyAddress Custody Address associated with mnemonic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookupUserByCustodyAddress: (apiKey: string, custodyAddress: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches power users based on Warpcast power badges
     * @summary Fetch power users
     * @param {string} apiKey API key required for authentication.
     * @param {number} [limit] Number of power users to fetch, max 100
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    powerUsers: (apiKey: string, limit?: number, cursor?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Register account on farcaster.
     * @summary Register account on farcaster
     * @param {string} apiKey API key required for authentication.
     * @param {RegisterUserReqBody} registerUserReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerUser: (apiKey: string, registerUserReqBody: RegisterUserReqBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Unfollow a user \\ (In order to unfollow a user `signer_uuid` must be approved)
     * @summary Unfollow a user
     * @param {string} apiKey API key required for authentication.
     * @param {FollowReqBody} followReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unfollowUser: (apiKey: string, followReqBody: FollowReqBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update user profile \\ (In order to update user\'s profile `signer_uuid` must be approved)
     * @summary Update user profile
     * @param {string} apiKey API key required for authentication.
     * @param {UpdateUserReqBody} updateUserReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser: (apiKey: string, updateUserReqBody: UpdateUserReqBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches information about multiple users based on FIDs
     * @summary Fetch users based on FIDs
     * @param {string} apiKey API key required for authentication.
     * @param {string} fids Comma separated list of FIDs, up to 100 at a time
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userBulk: (apiKey: string, fids: string, viewerFid?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches all users based on multiple Ethereum or Solana addresses.  Each farcaster user has a custody Ethereum address and optionally verified Ethereum or Solana addresses. This endpoint returns all users that have any of the given addresses as their custody or verified Ethereum or Solana addresses.  A custody address can be associated with only 1 farcaster user at a time but a verified address can be associated with multiple users. You can pass in Ethereum and Solana addresses, comma separated, in the same request. The response will contain users associated with the given addresses.
     * @summary Fetches users based on Eth or Sol addresses
     * @param {string} apiKey API key required for authentication.
     * @param {string} addresses Comma separated list of Ethereum addresses, up to 350 at a time
     * @param {string} [addressTypes] Customize which address types the request should search for. This is a comma-separated string that can include the following values: \&#39;custody_address\&#39; and \&#39;verified_address\&#39;. By default api returns both. To select multiple types, use a comma-separated list of these values.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userBulkByAddress: (apiKey: string, addresses: string, addressTypes?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Search for Usernames
     * @summary Search for Usernames
     * @param {string} apiKey API key required for authentication.
     * @param {string} q
     * @param {number} [viewerFid]
     * @param {number} [limit]
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSearch: (apiKey: string, q: string, viewerFid?: number, limit?: number, cursor?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UserApi - functional programming interface
 * @export
 */
export declare const UserApiFp: (configuration?: Configuration) => {
    /**
     * Fetches active users based on Warpcast active algorithm, information is updated every 12 hours
     * @summary Fetch active users
     * @param {string} apiKey API key required for authentication.
     * @param {number} [limit]
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activeUsers(apiKey: string, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersResponse>>;
    /**
     * Removes verification for an eth address for the user \\ (In order to delete verification `signer_uuid` must be approved)
     * @summary Removes verification for an eth address for the user
     * @param {string} apiKey API key required for authentication.
     * @param {RemoveVerificationReqBody} removeVerificationReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    farcasterUserVerificationDelete(apiKey: string, removeVerificationReqBody: RemoveVerificationReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationResponse>>;
    /**
     * Adds verification for an eth address for the user \\ (In order to add verification `signer_uuid` must be approved)
     * @summary Adds verification for an eth address for the user
     * @param {string} apiKey API key required for authentication.
     * @param {AddVerificationReqBody} addVerificationReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    farcasterUserVerificationPost(apiKey: string, addVerificationReqBody: AddVerificationReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationResponse>>;
    /**
     * Follow a user \\ (In order to follow a user `signer_uuid` must be approved)
     * @summary Follow a user
     * @param {string} apiKey API key required for authentication.
     * @param {FollowReqBody} followReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followUser(apiKey: string, followReqBody: FollowReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkFollowResponse>>;
    /**
     * Fetches fid to assign it new user
     * @summary Fetches fid to assign it new user
     * @param {string} apiKey API key required for authentication.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFreshFid(apiKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserFIDResponse>>;
    /**
     * Lookup a user by custody-address
     * @summary Lookup a user by custody-address
     * @param {string} apiKey API key required for authentication.
     * @param {string} custodyAddress Custody Address associated with mnemonic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookupUserByCustodyAddress(apiKey: string, custodyAddress: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>>;
    /**
     * Fetches power users based on Warpcast power badges
     * @summary Fetch power users
     * @param {string} apiKey API key required for authentication.
     * @param {number} [limit] Number of power users to fetch, max 100
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    powerUsers(apiKey: string, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersResponse>>;
    /**
     * Register account on farcaster.
     * @summary Register account on farcaster
     * @param {string} apiKey API key required for authentication.
     * @param {RegisterUserReqBody} registerUserReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerUser(apiKey: string, registerUserReqBody: RegisterUserReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterUserResponse>>;
    /**
     * Unfollow a user \\ (In order to unfollow a user `signer_uuid` must be approved)
     * @summary Unfollow a user
     * @param {string} apiKey API key required for authentication.
     * @param {FollowReqBody} followReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unfollowUser(apiKey: string, followReqBody: FollowReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkFollowResponse>>;
    /**
     * Update user profile \\ (In order to update user\'s profile `signer_uuid` must be approved)
     * @summary Update user profile
     * @param {string} apiKey API key required for authentication.
     * @param {UpdateUserReqBody} updateUserReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(apiKey: string, updateUserReqBody: UpdateUserReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationResponse>>;
    /**
     * Fetches information about multiple users based on FIDs
     * @summary Fetch users based on FIDs
     * @param {string} apiKey API key required for authentication.
     * @param {string} fids Comma separated list of FIDs, up to 100 at a time
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userBulk(apiKey: string, fids: string, viewerFid?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkUsersResponse>>;
    /**
     * Fetches all users based on multiple Ethereum or Solana addresses.  Each farcaster user has a custody Ethereum address and optionally verified Ethereum or Solana addresses. This endpoint returns all users that have any of the given addresses as their custody or verified Ethereum or Solana addresses.  A custody address can be associated with only 1 farcaster user at a time but a verified address can be associated with multiple users. You can pass in Ethereum and Solana addresses, comma separated, in the same request. The response will contain users associated with the given addresses.
     * @summary Fetches users based on Eth or Sol addresses
     * @param {string} apiKey API key required for authentication.
     * @param {string} addresses Comma separated list of Ethereum addresses, up to 350 at a time
     * @param {string} [addressTypes] Customize which address types the request should search for. This is a comma-separated string that can include the following values: \&#39;custody_address\&#39; and \&#39;verified_address\&#39;. By default api returns both. To select multiple types, use a comma-separated list of these values.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userBulkByAddress(apiKey: string, addresses: string, addressTypes?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: User[];
    }>>;
    /**
     * Search for Usernames
     * @summary Search for Usernames
     * @param {string} apiKey API key required for authentication.
     * @param {string} q
     * @param {number} [viewerFid]
     * @param {number} [limit]
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSearch(apiKey: string, q: string, viewerFid?: number, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSearchResponse>>;
};
/**
 * UserApi - factory interface
 * @export
 */
export declare const UserApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Fetches active users based on Warpcast active algorithm, information is updated every 12 hours
     * @summary Fetch active users
     * @param {string} apiKey API key required for authentication.
     * @param {number} [limit]
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activeUsers(apiKey: string, limit?: number, cursor?: string, options?: any): AxiosPromise<UsersResponse>;
    /**
     * Removes verification for an eth address for the user \\ (In order to delete verification `signer_uuid` must be approved)
     * @summary Removes verification for an eth address for the user
     * @param {string} apiKey API key required for authentication.
     * @param {RemoveVerificationReqBody} removeVerificationReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    farcasterUserVerificationDelete(apiKey: string, removeVerificationReqBody: RemoveVerificationReqBody, options?: any): AxiosPromise<OperationResponse>;
    /**
     * Adds verification for an eth address for the user \\ (In order to add verification `signer_uuid` must be approved)
     * @summary Adds verification for an eth address for the user
     * @param {string} apiKey API key required for authentication.
     * @param {AddVerificationReqBody} addVerificationReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    farcasterUserVerificationPost(apiKey: string, addVerificationReqBody: AddVerificationReqBody, options?: any): AxiosPromise<OperationResponse>;
    /**
     * Follow a user \\ (In order to follow a user `signer_uuid` must be approved)
     * @summary Follow a user
     * @param {string} apiKey API key required for authentication.
     * @param {FollowReqBody} followReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followUser(apiKey: string, followReqBody: FollowReqBody, options?: any): AxiosPromise<BulkFollowResponse>;
    /**
     * Fetches fid to assign it new user
     * @summary Fetches fid to assign it new user
     * @param {string} apiKey API key required for authentication.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFreshFid(apiKey: string, options?: any): AxiosPromise<UserFIDResponse>;
    /**
     * Lookup a user by custody-address
     * @summary Lookup a user by custody-address
     * @param {string} apiKey API key required for authentication.
     * @param {string} custodyAddress Custody Address associated with mnemonic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookupUserByCustodyAddress(apiKey: string, custodyAddress: string, options?: any): AxiosPromise<UserResponse>;
    /**
     * Fetches power users based on Warpcast power badges
     * @summary Fetch power users
     * @param {string} apiKey API key required for authentication.
     * @param {number} [limit] Number of power users to fetch, max 100
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    powerUsers(apiKey: string, limit?: number, cursor?: string, options?: any): AxiosPromise<UsersResponse>;
    /**
     * Register account on farcaster.
     * @summary Register account on farcaster
     * @param {string} apiKey API key required for authentication.
     * @param {RegisterUserReqBody} registerUserReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerUser(apiKey: string, registerUserReqBody: RegisterUserReqBody, options?: any): AxiosPromise<RegisterUserResponse>;
    /**
     * Unfollow a user \\ (In order to unfollow a user `signer_uuid` must be approved)
     * @summary Unfollow a user
     * @param {string} apiKey API key required for authentication.
     * @param {FollowReqBody} followReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unfollowUser(apiKey: string, followReqBody: FollowReqBody, options?: any): AxiosPromise<BulkFollowResponse>;
    /**
     * Update user profile \\ (In order to update user\'s profile `signer_uuid` must be approved)
     * @summary Update user profile
     * @param {string} apiKey API key required for authentication.
     * @param {UpdateUserReqBody} updateUserReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(apiKey: string, updateUserReqBody: UpdateUserReqBody, options?: any): AxiosPromise<OperationResponse>;
    /**
     * Fetches information about multiple users based on FIDs
     * @summary Fetch users based on FIDs
     * @param {string} apiKey API key required for authentication.
     * @param {string} fids Comma separated list of FIDs, up to 100 at a time
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userBulk(apiKey: string, fids: string, viewerFid?: number, options?: any): AxiosPromise<BulkUsersResponse>;
    /**
     * Fetches all users based on multiple Ethereum or Solana addresses.  Each farcaster user has a custody Ethereum address and optionally verified Ethereum or Solana addresses. This endpoint returns all users that have any of the given addresses as their custody or verified Ethereum or Solana addresses.  A custody address can be associated with only 1 farcaster user at a time but a verified address can be associated with multiple users. You can pass in Ethereum and Solana addresses, comma separated, in the same request. The response will contain users associated with the given addresses.
     * @summary Fetches users based on Eth or Sol addresses
     * @param {string} apiKey API key required for authentication.
     * @param {string} addresses Comma separated list of Ethereum addresses, up to 350 at a time
     * @param {string} [addressTypes] Customize which address types the request should search for. This is a comma-separated string that can include the following values: \&#39;custody_address\&#39; and \&#39;verified_address\&#39;. By default api returns both. To select multiple types, use a comma-separated list of these values.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userBulkByAddress(apiKey: string, addresses: string, addressTypes?: string, options?: any): AxiosPromise<{
        [key: string]: User[];
    }>;
    /**
     * Search for Usernames
     * @summary Search for Usernames
     * @param {string} apiKey API key required for authentication.
     * @param {string} q
     * @param {number} [viewerFid]
     * @param {number} [limit]
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSearch(apiKey: string, q: string, viewerFid?: number, limit?: number, cursor?: string, options?: any): AxiosPromise<UserSearchResponse>;
};
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export declare class UserApi extends BaseAPI {
    /**
     * Fetches active users based on Warpcast active algorithm, information is updated every 12 hours
     * @summary Fetch active users
     * @param {string} apiKey API key required for authentication.
     * @param {number} [limit]
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    activeUsers(apiKey: string, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UsersResponse, any>>;
    /**
     * Removes verification for an eth address for the user \\ (In order to delete verification `signer_uuid` must be approved)
     * @summary Removes verification for an eth address for the user
     * @param {string} apiKey API key required for authentication.
     * @param {RemoveVerificationReqBody} removeVerificationReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    farcasterUserVerificationDelete(apiKey: string, removeVerificationReqBody: RemoveVerificationReqBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OperationResponse, any>>;
    /**
     * Adds verification for an eth address for the user \\ (In order to add verification `signer_uuid` must be approved)
     * @summary Adds verification for an eth address for the user
     * @param {string} apiKey API key required for authentication.
     * @param {AddVerificationReqBody} addVerificationReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    farcasterUserVerificationPost(apiKey: string, addVerificationReqBody: AddVerificationReqBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OperationResponse, any>>;
    /**
     * Follow a user \\ (In order to follow a user `signer_uuid` must be approved)
     * @summary Follow a user
     * @param {string} apiKey API key required for authentication.
     * @param {FollowReqBody} followReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    followUser(apiKey: string, followReqBody: FollowReqBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BulkFollowResponse, any>>;
    /**
     * Fetches fid to assign it new user
     * @summary Fetches fid to assign it new user
     * @param {string} apiKey API key required for authentication.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getFreshFid(apiKey: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserFIDResponse, any>>;
    /**
     * Lookup a user by custody-address
     * @summary Lookup a user by custody-address
     * @param {string} apiKey API key required for authentication.
     * @param {string} custodyAddress Custody Address associated with mnemonic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    lookupUserByCustodyAddress(apiKey: string, custodyAddress: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserResponse, any>>;
    /**
     * Fetches power users based on Warpcast power badges
     * @summary Fetch power users
     * @param {string} apiKey API key required for authentication.
     * @param {number} [limit] Number of power users to fetch, max 100
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    powerUsers(apiKey: string, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UsersResponse, any>>;
    /**
     * Register account on farcaster.
     * @summary Register account on farcaster
     * @param {string} apiKey API key required for authentication.
     * @param {RegisterUserReqBody} registerUserReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    registerUser(apiKey: string, registerUserReqBody: RegisterUserReqBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RegisterUserResponse, any>>;
    /**
     * Unfollow a user \\ (In order to unfollow a user `signer_uuid` must be approved)
     * @summary Unfollow a user
     * @param {string} apiKey API key required for authentication.
     * @param {FollowReqBody} followReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    unfollowUser(apiKey: string, followReqBody: FollowReqBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BulkFollowResponse, any>>;
    /**
     * Update user profile \\ (In order to update user\'s profile `signer_uuid` must be approved)
     * @summary Update user profile
     * @param {string} apiKey API key required for authentication.
     * @param {UpdateUserReqBody} updateUserReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    updateUser(apiKey: string, updateUserReqBody: UpdateUserReqBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OperationResponse, any>>;
    /**
     * Fetches information about multiple users based on FIDs
     * @summary Fetch users based on FIDs
     * @param {string} apiKey API key required for authentication.
     * @param {string} fids Comma separated list of FIDs, up to 100 at a time
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    userBulk(apiKey: string, fids: string, viewerFid?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BulkUsersResponse, any>>;
    /**
     * Fetches all users based on multiple Ethereum or Solana addresses.  Each farcaster user has a custody Ethereum address and optionally verified Ethereum or Solana addresses. This endpoint returns all users that have any of the given addresses as their custody or verified Ethereum or Solana addresses.  A custody address can be associated with only 1 farcaster user at a time but a verified address can be associated with multiple users. You can pass in Ethereum and Solana addresses, comma separated, in the same request. The response will contain users associated with the given addresses.
     * @summary Fetches users based on Eth or Sol addresses
     * @param {string} apiKey API key required for authentication.
     * @param {string} addresses Comma separated list of Ethereum addresses, up to 350 at a time
     * @param {string} [addressTypes] Customize which address types the request should search for. This is a comma-separated string that can include the following values: \&#39;custody_address\&#39; and \&#39;verified_address\&#39;. By default api returns both. To select multiple types, use a comma-separated list of these values.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    userBulkByAddress(apiKey: string, addresses: string, addressTypes?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<{
        [key: string]: User[];
    }, any>>;
    /**
     * Search for Usernames
     * @summary Search for Usernames
     * @param {string} apiKey API key required for authentication.
     * @param {string} q
     * @param {number} [viewerFid]
     * @param {number} [limit]
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    userSearch(apiKey: string, q: string, viewerFid?: number, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserSearchResponse, any>>;
}
