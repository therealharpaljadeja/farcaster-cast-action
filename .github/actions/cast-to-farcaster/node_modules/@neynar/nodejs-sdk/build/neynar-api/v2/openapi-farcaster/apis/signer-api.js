"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignerApi = exports.SignerApiFactory = exports.SignerApiFp = exports.SignerApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * SignerApi - axios parameter creator
 * @export
 */
const SignerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a signer and returns the signer status. \\ **Note**: While tesing please reuse the signer, it costs money to approve a signer.
         * @summary Creates a signer and returns the signer status
         * @param {string} apiKey API key required for authentication.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSigner: async (apiKey, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('createSigner', 'apiKey', apiKey);
            const localVarPath = `/farcaster/signer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the status of a developer managed signer by public key
         * @summary Fetches the status of a signer by public key
         * @param {string} apiKey API key required for authentication.
         * @param {string} publicKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        developerManagedSigner: async (apiKey, publicKey, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('developerManagedSigner', 'apiKey', apiKey);
            // verify required parameter 'publicKey' is not null or undefined
            (0, common_1.assertParamExists)('developerManagedSigner', 'publicKey', publicKey);
            const localVarPath = `/farcaster/signer/developer_managed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (publicKey !== undefined) {
                localVarQueryParameter['public_key'] = publicKey;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch authorization url (Fetched authorized url useful for SIWN login operation)
         * @summary Fetch authorization url
         * @param {string} apiKey API key required for authentication.
         * @param {string} clientId
         * @param {AuthorizationUrlResponseType} responseType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAuthorizationUrl: async (apiKey, clientId, responseType, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('fetchAuthorizationUrl', 'apiKey', apiKey);
            // verify required parameter 'clientId' is not null or undefined
            (0, common_1.assertParamExists)('fetchAuthorizationUrl', 'clientId', clientId);
            // verify required parameter 'responseType' is not null or undefined
            (0, common_1.assertParamExists)('fetchAuthorizationUrl', 'responseType', responseType);
            const localVarPath = `/farcaster/login/authorize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (clientId !== undefined) {
                localVarQueryParameter['client_id'] = clientId;
            }
            if (responseType !== undefined) {
                localVarQueryParameter['response_type'] = responseType;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
         * @summary Publish a message to farcaster
         * @param {string} apiKey API key required for authentication.
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishMessage: async (apiKey, body, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('publishMessage', 'apiKey', apiKey);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('publishMessage', 'body', body);
            const localVarPath = `/farcaster/message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Registers an app fid, deadline and a signature. Returns the signer status with an approval url.
         * @summary Register Signed Key
         * @param {string} apiKey API key required for authentication.
         * @param {RegisterSignerKeyReqBody} registerSignerKeyReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerSignedKey: async (apiKey, registerSignerKeyReqBody, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('registerSignedKey', 'apiKey', apiKey);
            // verify required parameter 'registerSignerKeyReqBody' is not null or undefined
            (0, common_1.assertParamExists)('registerSignedKey', 'registerSignerKeyReqBody', registerSignerKeyReqBody);
            const localVarPath = `/farcaster/signer/signed_key`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(registerSignerKeyReqBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Registers an signed key and returns the developer managed signer status with an approval url.
         * @summary Registers Signed Key
         * @param {string} apiKey API key required for authentication.
         * @param {RegisterDeveloperManagedSignedKeyReqBody} registerDeveloperManagedSignedKeyReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerSignedKeyForDeveloperManagedSigner: async (apiKey, registerDeveloperManagedSignedKeyReqBody, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('registerSignedKeyForDeveloperManagedSigner', 'apiKey', apiKey);
            // verify required parameter 'registerDeveloperManagedSignedKeyReqBody' is not null or undefined
            (0, common_1.assertParamExists)('registerSignedKeyForDeveloperManagedSigner', 'registerDeveloperManagedSignedKeyReqBody', registerDeveloperManagedSignedKeyReqBody);
            const localVarPath = `/farcaster/signer/developer_managed/signed_key`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(registerDeveloperManagedSignedKeyReqBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
         * @summary Fetches the status of a signer
         * @param {string} apiKey API key required for authentication.
         * @param {string} signerUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signer: async (apiKey, signerUuid, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('signer', 'apiKey', apiKey);
            // verify required parameter 'signerUuid' is not null or undefined
            (0, common_1.assertParamExists)('signer', 'signerUuid', signerUuid);
            const localVarPath = `/farcaster/signer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (signerUuid !== undefined) {
                localVarQueryParameter['signer_uuid'] = signerUuid;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.SignerApiAxiosParamCreator = SignerApiAxiosParamCreator;
/**
 * SignerApi - functional programming interface
 * @export
 */
const SignerApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.SignerApiAxiosParamCreator)(configuration);
    return {
        /**
         * Creates a signer and returns the signer status. \\ **Note**: While tesing please reuse the signer, it costs money to approve a signer.
         * @summary Creates a signer and returns the signer status
         * @param {string} apiKey API key required for authentication.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSigner(apiKey, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSigner(apiKey, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Fetches the status of a developer managed signer by public key
         * @summary Fetches the status of a signer by public key
         * @param {string} apiKey API key required for authentication.
         * @param {string} publicKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async developerManagedSigner(apiKey, publicKey, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.developerManagedSigner(apiKey, publicKey, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Fetch authorization url (Fetched authorized url useful for SIWN login operation)
         * @summary Fetch authorization url
         * @param {string} apiKey API key required for authentication.
         * @param {string} clientId
         * @param {AuthorizationUrlResponseType} responseType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchAuthorizationUrl(apiKey, clientId, responseType, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchAuthorizationUrl(apiKey, clientId, responseType, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
         * @summary Publish a message to farcaster
         * @param {string} apiKey API key required for authentication.
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishMessage(apiKey, body, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishMessage(apiKey, body, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Registers an app fid, deadline and a signature. Returns the signer status with an approval url.
         * @summary Register Signed Key
         * @param {string} apiKey API key required for authentication.
         * @param {RegisterSignerKeyReqBody} registerSignerKeyReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerSignedKey(apiKey, registerSignerKeyReqBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerSignedKey(apiKey, registerSignerKeyReqBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Registers an signed key and returns the developer managed signer status with an approval url.
         * @summary Registers Signed Key
         * @param {string} apiKey API key required for authentication.
         * @param {RegisterDeveloperManagedSignedKeyReqBody} registerDeveloperManagedSignedKeyReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerSignedKeyForDeveloperManagedSigner(apiKey, registerDeveloperManagedSignedKeyReqBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerSignedKeyForDeveloperManagedSigner(apiKey, registerDeveloperManagedSignedKeyReqBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
         * @summary Fetches the status of a signer
         * @param {string} apiKey API key required for authentication.
         * @param {string} signerUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signer(apiKey, signerUuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signer(apiKey, signerUuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.SignerApiFp = SignerApiFp;
/**
 * SignerApi - factory interface
 * @export
 */
const SignerApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.SignerApiFp)(configuration);
    return {
        /**
         * Creates a signer and returns the signer status. \\ **Note**: While tesing please reuse the signer, it costs money to approve a signer.
         * @summary Creates a signer and returns the signer status
         * @param {string} apiKey API key required for authentication.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSigner(apiKey, options) {
            return localVarFp.createSigner(apiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the status of a developer managed signer by public key
         * @summary Fetches the status of a signer by public key
         * @param {string} apiKey API key required for authentication.
         * @param {string} publicKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        developerManagedSigner(apiKey, publicKey, options) {
            return localVarFp.developerManagedSigner(apiKey, publicKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch authorization url (Fetched authorized url useful for SIWN login operation)
         * @summary Fetch authorization url
         * @param {string} apiKey API key required for authentication.
         * @param {string} clientId
         * @param {AuthorizationUrlResponseType} responseType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAuthorizationUrl(apiKey, clientId, responseType, options) {
            return localVarFp.fetchAuthorizationUrl(apiKey, clientId, responseType, options).then((request) => request(axios, basePath));
        },
        /**
         * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
         * @summary Publish a message to farcaster
         * @param {string} apiKey API key required for authentication.
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishMessage(apiKey, body, options) {
            return localVarFp.publishMessage(apiKey, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Registers an app fid, deadline and a signature. Returns the signer status with an approval url.
         * @summary Register Signed Key
         * @param {string} apiKey API key required for authentication.
         * @param {RegisterSignerKeyReqBody} registerSignerKeyReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerSignedKey(apiKey, registerSignerKeyReqBody, options) {
            return localVarFp.registerSignedKey(apiKey, registerSignerKeyReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Registers an signed key and returns the developer managed signer status with an approval url.
         * @summary Registers Signed Key
         * @param {string} apiKey API key required for authentication.
         * @param {RegisterDeveloperManagedSignedKeyReqBody} registerDeveloperManagedSignedKeyReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerSignedKeyForDeveloperManagedSigner(apiKey, registerDeveloperManagedSignedKeyReqBody, options) {
            return localVarFp.registerSignedKeyForDeveloperManagedSigner(apiKey, registerDeveloperManagedSignedKeyReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
         * @summary Fetches the status of a signer
         * @param {string} apiKey API key required for authentication.
         * @param {string} signerUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signer(apiKey, signerUuid, options) {
            return localVarFp.signer(apiKey, signerUuid, options).then((request) => request(axios, basePath));
        },
    };
};
exports.SignerApiFactory = SignerApiFactory;
/**
 * SignerApi - object-oriented interface
 * @export
 * @class SignerApi
 * @extends {BaseAPI}
 */
class SignerApi extends base_1.BaseAPI {
    /**
     * Creates a signer and returns the signer status. \\ **Note**: While tesing please reuse the signer, it costs money to approve a signer.
     * @summary Creates a signer and returns the signer status
     * @param {string} apiKey API key required for authentication.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     */
    createSigner(apiKey, options) {
        return (0, exports.SignerApiFp)(this.configuration).createSigner(apiKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches the status of a developer managed signer by public key
     * @summary Fetches the status of a signer by public key
     * @param {string} apiKey API key required for authentication.
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     */
    developerManagedSigner(apiKey, publicKey, options) {
        return (0, exports.SignerApiFp)(this.configuration).developerManagedSigner(apiKey, publicKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch authorization url (Fetched authorized url useful for SIWN login operation)
     * @summary Fetch authorization url
     * @param {string} apiKey API key required for authentication.
     * @param {string} clientId
     * @param {AuthorizationUrlResponseType} responseType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     */
    fetchAuthorizationUrl(apiKey, clientId, responseType, options) {
        return (0, exports.SignerApiFp)(this.configuration).fetchAuthorizationUrl(apiKey, clientId, responseType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
     * @summary Publish a message to farcaster
     * @param {string} apiKey API key required for authentication.
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     */
    publishMessage(apiKey, body, options) {
        return (0, exports.SignerApiFp)(this.configuration).publishMessage(apiKey, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Registers an app fid, deadline and a signature. Returns the signer status with an approval url.
     * @summary Register Signed Key
     * @param {string} apiKey API key required for authentication.
     * @param {RegisterSignerKeyReqBody} registerSignerKeyReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     */
    registerSignedKey(apiKey, registerSignerKeyReqBody, options) {
        return (0, exports.SignerApiFp)(this.configuration).registerSignedKey(apiKey, registerSignerKeyReqBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Registers an signed key and returns the developer managed signer status with an approval url.
     * @summary Registers Signed Key
     * @param {string} apiKey API key required for authentication.
     * @param {RegisterDeveloperManagedSignedKeyReqBody} registerDeveloperManagedSignedKeyReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     */
    registerSignedKeyForDeveloperManagedSigner(apiKey, registerDeveloperManagedSignedKeyReqBody, options) {
        return (0, exports.SignerApiFp)(this.configuration).registerSignedKeyForDeveloperManagedSigner(apiKey, registerDeveloperManagedSignedKeyReqBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
     * @summary Fetches the status of a signer
     * @param {string} apiKey API key required for authentication.
     * @param {string} signerUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     */
    signer(apiKey, signerUuid, options) {
        return (0, exports.SignerApiFp)(this.configuration).signer(apiKey, signerUuid, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SignerApi = SignerApi;
