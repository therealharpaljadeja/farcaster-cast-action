"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Recommendation API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NFTApi = exports.NFTApiFactory = exports.NFTApiFp = exports.NFTApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * NFTApi - axios parameter creator
 * @export
 */
const NFTApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Fetches all mint actions relevant for a contract address (and optionally tokenId for ERC1155s) given a user\'s ethereum address
         * @summary Relevant Mints for a User
         * @param {string} apiKey API key required for authentication.
         * @param {string} address
         * @param {string} contractAddress
         * @param {string} [tokenId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRelevantMints: async (apiKey, address, contractAddress, tokenId, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('fetchRelevantMints', 'apiKey', apiKey);
            // verify required parameter 'address' is not null or undefined
            (0, common_1.assertParamExists)('fetchRelevantMints', 'address', address);
            // verify required parameter 'contractAddress' is not null or undefined
            (0, common_1.assertParamExists)('fetchRelevantMints', 'contractAddress', contractAddress);
            const localVarPath = `/nft/relevant_mints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }
            if (contractAddress !== undefined) {
                localVarQueryParameter['contract_address'] = contractAddress;
            }
            if (tokenId !== undefined) {
                localVarQueryParameter['token_id'] = tokenId;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.NFTApiAxiosParamCreator = NFTApiAxiosParamCreator;
/**
 * NFTApi - functional programming interface
 * @export
 */
const NFTApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.NFTApiAxiosParamCreator)(configuration);
    return {
        /**
         * Fetches all mint actions relevant for a contract address (and optionally tokenId for ERC1155s) given a user\'s ethereum address
         * @summary Relevant Mints for a User
         * @param {string} apiKey API key required for authentication.
         * @param {string} address
         * @param {string} contractAddress
         * @param {string} [tokenId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchRelevantMints(apiKey, address, contractAddress, tokenId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchRelevantMints(apiKey, address, contractAddress, tokenId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.NFTApiFp = NFTApiFp;
/**
 * NFTApi - factory interface
 * @export
 */
const NFTApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.NFTApiFp)(configuration);
    return {
        /**
         * Fetches all mint actions relevant for a contract address (and optionally tokenId for ERC1155s) given a user\'s ethereum address
         * @summary Relevant Mints for a User
         * @param {string} apiKey API key required for authentication.
         * @param {string} address
         * @param {string} contractAddress
         * @param {string} [tokenId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRelevantMints(apiKey, address, contractAddress, tokenId, options) {
            return localVarFp.fetchRelevantMints(apiKey, address, contractAddress, tokenId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.NFTApiFactory = NFTApiFactory;
/**
 * NFTApi - object-oriented interface
 * @export
 * @class NFTApi
 * @extends {BaseAPI}
 */
class NFTApi extends base_1.BaseAPI {
    /**
     * Fetches all mint actions relevant for a contract address (and optionally tokenId for ERC1155s) given a user\'s ethereum address
     * @summary Relevant Mints for a User
     * @param {string} apiKey API key required for authentication.
     * @param {string} address
     * @param {string} contractAddress
     * @param {string} [tokenId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTApi
     */
    fetchRelevantMints(apiKey, address, contractAddress, tokenId, options) {
        return (0, exports.NFTApiFp)(this.configuration).fetchRelevantMints(apiKey, address, contractAddress, tokenId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.NFTApi = NFTApi;
