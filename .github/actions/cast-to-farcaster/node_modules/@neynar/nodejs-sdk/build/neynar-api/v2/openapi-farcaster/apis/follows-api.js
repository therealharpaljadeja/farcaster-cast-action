"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FollowsApi = exports.FollowsApiFactory = exports.FollowsApiFp = exports.FollowsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * FollowsApi - axios parameter creator
 * @export
 */
const FollowsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns a list of relevant followers for a specific FID.
         * @summary Retrieve relevant followers for a given user
         * @param {string} apiKey API key required for authentication.
         * @param {number} targetFid User who\&#39;s profile you are looking at
         * @param {number} viewerFid Viewer who\&#39;s looking at the profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relevantFollowers: async (apiKey, targetFid, viewerFid, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('relevantFollowers', 'apiKey', apiKey);
            // verify required parameter 'targetFid' is not null or undefined
            (0, common_1.assertParamExists)('relevantFollowers', 'targetFid', targetFid);
            // verify required parameter 'viewerFid' is not null or undefined
            (0, common_1.assertParamExists)('relevantFollowers', 'viewerFid', viewerFid);
            const localVarPath = `/farcaster/followers/relevant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (targetFid !== undefined) {
                localVarQueryParameter['target_fid'] = targetFid;
            }
            if (viewerFid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewerFid;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.FollowsApiAxiosParamCreator = FollowsApiAxiosParamCreator;
/**
 * FollowsApi - functional programming interface
 * @export
 */
const FollowsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.FollowsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Returns a list of relevant followers for a specific FID.
         * @summary Retrieve relevant followers for a given user
         * @param {string} apiKey API key required for authentication.
         * @param {number} targetFid User who\&#39;s profile you are looking at
         * @param {number} viewerFid Viewer who\&#39;s looking at the profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async relevantFollowers(apiKey, targetFid, viewerFid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.relevantFollowers(apiKey, targetFid, viewerFid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.FollowsApiFp = FollowsApiFp;
/**
 * FollowsApi - factory interface
 * @export
 */
const FollowsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.FollowsApiFp)(configuration);
    return {
        /**
         * Returns a list of relevant followers for a specific FID.
         * @summary Retrieve relevant followers for a given user
         * @param {string} apiKey API key required for authentication.
         * @param {number} targetFid User who\&#39;s profile you are looking at
         * @param {number} viewerFid Viewer who\&#39;s looking at the profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relevantFollowers(apiKey, targetFid, viewerFid, options) {
            return localVarFp.relevantFollowers(apiKey, targetFid, viewerFid, options).then((request) => request(axios, basePath));
        },
    };
};
exports.FollowsApiFactory = FollowsApiFactory;
/**
 * FollowsApi - object-oriented interface
 * @export
 * @class FollowsApi
 * @extends {BaseAPI}
 */
class FollowsApi extends base_1.BaseAPI {
    /**
     * Returns a list of relevant followers for a specific FID.
     * @summary Retrieve relevant followers for a given user
     * @param {string} apiKey API key required for authentication.
     * @param {number} targetFid User who\&#39;s profile you are looking at
     * @param {number} viewerFid Viewer who\&#39;s looking at the profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApi
     */
    relevantFollowers(apiKey, targetFid, viewerFid, options) {
        return (0, exports.FollowsApiFp)(this.configuration).relevantFollowers(apiKey, targetFid, viewerFid, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.FollowsApi = FollowsApi;
