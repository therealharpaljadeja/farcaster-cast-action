/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/base';
import { NotificationsResponse } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/models';
/**
 * NotificationsApi - axios parameter creator
 * @export
 */
export declare const NotificationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns a list of notifications for a specific FID.
     * @summary Retrieve notifications for a given user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid FID of the user you you want to fetch notifications for
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notifications: (apiKey: string, fid: number, cursor?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of notifications for a user in specific channels
     * @summary Retrieve notifications for a user in given channels
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid FID of the user you you want to fetch notifications for
     * @param {string} channelIds Comma separated channel_ids (find list of all channels here - https://docs.neynar.com/reference/list-all-channels)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationsChannel: (apiKey: string, fid: number, channelIds: string, cursor?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of notifications for a user in specific parent_urls
     * @summary Retrieve notifications for a user in given parent_urls
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid FID of the user you you want to fetch notifications for
     * @param {string} parentUrls Comma separated parent_urls
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationsParentUrl: (apiKey: string, fid: number, parentUrls: string, cursor?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * NotificationsApi - functional programming interface
 * @export
 */
export declare const NotificationsApiFp: (configuration?: Configuration) => {
    /**
     * Returns a list of notifications for a specific FID.
     * @summary Retrieve notifications for a given user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid FID of the user you you want to fetch notifications for
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notifications(apiKey: string, fid: number, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationsResponse>>;
    /**
     * Returns a list of notifications for a user in specific channels
     * @summary Retrieve notifications for a user in given channels
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid FID of the user you you want to fetch notifications for
     * @param {string} channelIds Comma separated channel_ids (find list of all channels here - https://docs.neynar.com/reference/list-all-channels)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationsChannel(apiKey: string, fid: number, channelIds: string, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationsResponse>>;
    /**
     * Returns a list of notifications for a user in specific parent_urls
     * @summary Retrieve notifications for a user in given parent_urls
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid FID of the user you you want to fetch notifications for
     * @param {string} parentUrls Comma separated parent_urls
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationsParentUrl(apiKey: string, fid: number, parentUrls: string, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationsResponse>>;
};
/**
 * NotificationsApi - factory interface
 * @export
 */
export declare const NotificationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns a list of notifications for a specific FID.
     * @summary Retrieve notifications for a given user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid FID of the user you you want to fetch notifications for
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notifications(apiKey: string, fid: number, cursor?: string, options?: any): AxiosPromise<NotificationsResponse>;
    /**
     * Returns a list of notifications for a user in specific channels
     * @summary Retrieve notifications for a user in given channels
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid FID of the user you you want to fetch notifications for
     * @param {string} channelIds Comma separated channel_ids (find list of all channels here - https://docs.neynar.com/reference/list-all-channels)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationsChannel(apiKey: string, fid: number, channelIds: string, cursor?: string, options?: any): AxiosPromise<NotificationsResponse>;
    /**
     * Returns a list of notifications for a user in specific parent_urls
     * @summary Retrieve notifications for a user in given parent_urls
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid FID of the user you you want to fetch notifications for
     * @param {string} parentUrls Comma separated parent_urls
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationsParentUrl(apiKey: string, fid: number, parentUrls: string, cursor?: string, options?: any): AxiosPromise<NotificationsResponse>;
};
/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
export declare class NotificationsApi extends BaseAPI {
    /**
     * Returns a list of notifications for a specific FID.
     * @summary Retrieve notifications for a given user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid FID of the user you you want to fetch notifications for
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    notifications(apiKey: string, fid: number, cursor?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NotificationsResponse, any>>;
    /**
     * Returns a list of notifications for a user in specific channels
     * @summary Retrieve notifications for a user in given channels
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid FID of the user you you want to fetch notifications for
     * @param {string} channelIds Comma separated channel_ids (find list of all channels here - https://docs.neynar.com/reference/list-all-channels)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    notificationsChannel(apiKey: string, fid: number, channelIds: string, cursor?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NotificationsResponse, any>>;
    /**
     * Returns a list of notifications for a user in specific parent_urls
     * @summary Retrieve notifications for a user in given parent_urls
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid FID of the user you you want to fetch notifications for
     * @param {string} parentUrls Comma separated parent_urls
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    notificationsParentUrl(apiKey: string, fid: number, parentUrls: string, cursor?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NotificationsResponse, any>>;
}
