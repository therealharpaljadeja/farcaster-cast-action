/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { CastParamType } from '../models';
import { CastResponse } from '../models';
import { CastsResponse } from '../models';
import { Conversation } from '../models';
import { DeleteCastReqBody } from '../models';
import { OperationResponse } from '../models';
import { PostCastReqBody } from '../models';
import { PostCastResponse } from '../models';
/**
 * CastApi - axios parameter creator
 * @export
 */
export declare const CastApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Gets information about an individual cast by passing in a Warpcast web URL or cast hash
     * @summary Retrieve cast for a given hash or Warpcast URL
     * @param {string} apiKey API key required for authentication.
     * @param {string} identifier Cast identifier (Its either a url or a hash)
     * @param {CastParamType} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cast: (apiKey: string, identifier: string, type: CastParamType, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets all casts related to a conversation surrounding a cast by passing in a cast hash or Warpcast URL. Includes all the ancestors of a cast up to the root parent in a chronological order. Includes all direct_replies to the cast up to the reply_depth specified in the query parameter.
     * @summary Retrieve the conversation for a given cast
     * @param {string} apiKey API key required for authentication.
     * @param {string} identifier Cast identifier (Its either a url or a hash)
     * @param {CastParamType} type
     * @param {number} [replyDepth] The depth of replies in the conversation that will be returned (default 2)
     * @param {boolean} [includeChronologicalParentCasts] Include all parent casts in chronological order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    castConversation: (apiKey: string, identifier: string, type: CastParamType, replyDepth?: number, includeChronologicalParentCasts?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve multiple casts using their respective hashes.
     * @summary Gets information about an array of casts
     * @param {string} apiKey API key required for authentication.
     * @param {string} casts Hashes of the cast to be retrived (Comma separated)
     * @param {number} [viewerFid] adds viewer_context to cast object to show whether viewer has liked or recasted the cast.
     * @param {'trending' | 'likes' | 'recasts' | 'replies' | 'recent'} [sortType] Optional parameter to sort the casts based on different criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casts: (apiKey: string, casts: string, viewerFid?: number, sortType?: 'trending' | 'likes' | 'recasts' | 'replies' | 'recent', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete an existing cast. \\ (In order to delete a cast `signer_uuid` must be approved)
     * @summary Delete a cast
     * @param {string} apiKey API key required for authentication.
     * @param {DeleteCastReqBody} deleteCastReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCast: (apiKey: string, deleteCastReqBody: DeleteCastReqBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Posts a cast or cast reply. Works with mentions and embeds.   (In order to post a cast `signer_uuid` must be approved)
     * @summary Posts a cast
     * @param {string} apiKey API key required for authentication.
     * @param {PostCastReqBody} postCastReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCast: (apiKey: string, postCastReqBody: PostCastReqBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CastApi - functional programming interface
 * @export
 */
export declare const CastApiFp: (configuration?: Configuration) => {
    /**
     * Gets information about an individual cast by passing in a Warpcast web URL or cast hash
     * @summary Retrieve cast for a given hash or Warpcast URL
     * @param {string} apiKey API key required for authentication.
     * @param {string} identifier Cast identifier (Its either a url or a hash)
     * @param {CastParamType} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cast(apiKey: string, identifier: string, type: CastParamType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CastResponse>>;
    /**
     * Gets all casts related to a conversation surrounding a cast by passing in a cast hash or Warpcast URL. Includes all the ancestors of a cast up to the root parent in a chronological order. Includes all direct_replies to the cast up to the reply_depth specified in the query parameter.
     * @summary Retrieve the conversation for a given cast
     * @param {string} apiKey API key required for authentication.
     * @param {string} identifier Cast identifier (Its either a url or a hash)
     * @param {CastParamType} type
     * @param {number} [replyDepth] The depth of replies in the conversation that will be returned (default 2)
     * @param {boolean} [includeChronologicalParentCasts] Include all parent casts in chronological order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    castConversation(apiKey: string, identifier: string, type: CastParamType, replyDepth?: number, includeChronologicalParentCasts?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Conversation>>;
    /**
     * Retrieve multiple casts using their respective hashes.
     * @summary Gets information about an array of casts
     * @param {string} apiKey API key required for authentication.
     * @param {string} casts Hashes of the cast to be retrived (Comma separated)
     * @param {number} [viewerFid] adds viewer_context to cast object to show whether viewer has liked or recasted the cast.
     * @param {'trending' | 'likes' | 'recasts' | 'replies' | 'recent'} [sortType] Optional parameter to sort the casts based on different criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casts(apiKey: string, casts: string, viewerFid?: number, sortType?: 'trending' | 'likes' | 'recasts' | 'replies' | 'recent', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CastsResponse>>;
    /**
     * Delete an existing cast. \\ (In order to delete a cast `signer_uuid` must be approved)
     * @summary Delete a cast
     * @param {string} apiKey API key required for authentication.
     * @param {DeleteCastReqBody} deleteCastReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCast(apiKey: string, deleteCastReqBody: DeleteCastReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationResponse>>;
    /**
     * Posts a cast or cast reply. Works with mentions and embeds.   (In order to post a cast `signer_uuid` must be approved)
     * @summary Posts a cast
     * @param {string} apiKey API key required for authentication.
     * @param {PostCastReqBody} postCastReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCast(apiKey: string, postCastReqBody: PostCastReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostCastResponse>>;
};
/**
 * CastApi - factory interface
 * @export
 */
export declare const CastApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Gets information about an individual cast by passing in a Warpcast web URL or cast hash
     * @summary Retrieve cast for a given hash or Warpcast URL
     * @param {string} apiKey API key required for authentication.
     * @param {string} identifier Cast identifier (Its either a url or a hash)
     * @param {CastParamType} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cast(apiKey: string, identifier: string, type: CastParamType, options?: any): AxiosPromise<CastResponse>;
    /**
     * Gets all casts related to a conversation surrounding a cast by passing in a cast hash or Warpcast URL. Includes all the ancestors of a cast up to the root parent in a chronological order. Includes all direct_replies to the cast up to the reply_depth specified in the query parameter.
     * @summary Retrieve the conversation for a given cast
     * @param {string} apiKey API key required for authentication.
     * @param {string} identifier Cast identifier (Its either a url or a hash)
     * @param {CastParamType} type
     * @param {number} [replyDepth] The depth of replies in the conversation that will be returned (default 2)
     * @param {boolean} [includeChronologicalParentCasts] Include all parent casts in chronological order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    castConversation(apiKey: string, identifier: string, type: CastParamType, replyDepth?: number, includeChronologicalParentCasts?: boolean, options?: any): AxiosPromise<Conversation>;
    /**
     * Retrieve multiple casts using their respective hashes.
     * @summary Gets information about an array of casts
     * @param {string} apiKey API key required for authentication.
     * @param {string} casts Hashes of the cast to be retrived (Comma separated)
     * @param {number} [viewerFid] adds viewer_context to cast object to show whether viewer has liked or recasted the cast.
     * @param {'trending' | 'likes' | 'recasts' | 'replies' | 'recent'} [sortType] Optional parameter to sort the casts based on different criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casts(apiKey: string, casts: string, viewerFid?: number, sortType?: 'trending' | 'likes' | 'recasts' | 'replies' | 'recent', options?: any): AxiosPromise<CastsResponse>;
    /**
     * Delete an existing cast. \\ (In order to delete a cast `signer_uuid` must be approved)
     * @summary Delete a cast
     * @param {string} apiKey API key required for authentication.
     * @param {DeleteCastReqBody} deleteCastReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCast(apiKey: string, deleteCastReqBody: DeleteCastReqBody, options?: any): AxiosPromise<OperationResponse>;
    /**
     * Posts a cast or cast reply. Works with mentions and embeds.   (In order to post a cast `signer_uuid` must be approved)
     * @summary Posts a cast
     * @param {string} apiKey API key required for authentication.
     * @param {PostCastReqBody} postCastReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCast(apiKey: string, postCastReqBody: PostCastReqBody, options?: any): AxiosPromise<PostCastResponse>;
};
/**
 * CastApi - object-oriented interface
 * @export
 * @class CastApi
 * @extends {BaseAPI}
 */
export declare class CastApi extends BaseAPI {
    /**
     * Gets information about an individual cast by passing in a Warpcast web URL or cast hash
     * @summary Retrieve cast for a given hash or Warpcast URL
     * @param {string} apiKey API key required for authentication.
     * @param {string} identifier Cast identifier (Its either a url or a hash)
     * @param {CastParamType} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     */
    cast(apiKey: string, identifier: string, type: CastParamType, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CastResponse, any>>;
    /**
     * Gets all casts related to a conversation surrounding a cast by passing in a cast hash or Warpcast URL. Includes all the ancestors of a cast up to the root parent in a chronological order. Includes all direct_replies to the cast up to the reply_depth specified in the query parameter.
     * @summary Retrieve the conversation for a given cast
     * @param {string} apiKey API key required for authentication.
     * @param {string} identifier Cast identifier (Its either a url or a hash)
     * @param {CastParamType} type
     * @param {number} [replyDepth] The depth of replies in the conversation that will be returned (default 2)
     * @param {boolean} [includeChronologicalParentCasts] Include all parent casts in chronological order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     */
    castConversation(apiKey: string, identifier: string, type: CastParamType, replyDepth?: number, includeChronologicalParentCasts?: boolean, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Conversation, any>>;
    /**
     * Retrieve multiple casts using their respective hashes.
     * @summary Gets information about an array of casts
     * @param {string} apiKey API key required for authentication.
     * @param {string} casts Hashes of the cast to be retrived (Comma separated)
     * @param {number} [viewerFid] adds viewer_context to cast object to show whether viewer has liked or recasted the cast.
     * @param {'trending' | 'likes' | 'recasts' | 'replies' | 'recent'} [sortType] Optional parameter to sort the casts based on different criteria
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     */
    casts(apiKey: string, casts: string, viewerFid?: number, sortType?: 'trending' | 'likes' | 'recasts' | 'replies' | 'recent', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CastsResponse, any>>;
    /**
     * Delete an existing cast. \\ (In order to delete a cast `signer_uuid` must be approved)
     * @summary Delete a cast
     * @param {string} apiKey API key required for authentication.
     * @param {DeleteCastReqBody} deleteCastReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     */
    deleteCast(apiKey: string, deleteCastReqBody: DeleteCastReqBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OperationResponse, any>>;
    /**
     * Posts a cast or cast reply. Works with mentions and embeds.   (In order to post a cast `signer_uuid` must be approved)
     * @summary Posts a cast
     * @param {string} apiKey API key required for authentication.
     * @param {PostCastReqBody} postCastReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     */
    postCast(apiKey: string, postCastReqBody: PostCastReqBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PostCastResponse, any>>;
}
