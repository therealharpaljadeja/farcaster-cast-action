"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FrameApi = exports.FrameApiFactory = exports.FrameApiFp = exports.FrameApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * FrameApi - axios parameter creator
 * @export
 */
const FrameApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Delete an existing frame, if it was made by the developer (identified by API key)
         * @summary Delete a frame
         * @param {string} apiKey API key required for authentication.
         * @param {DeleteNeynarFrameRequest} deleteNeynarFrameRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNeynarFrame: async (apiKey, deleteNeynarFrameRequest, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('deleteNeynarFrame', 'apiKey', apiKey);
            // verify required parameter 'deleteNeynarFrameRequest' is not null or undefined
            (0, common_1.assertParamExists)('deleteNeynarFrame', 'deleteNeynarFrameRequest', deleteNeynarFrameRequest);
            const localVarPath = `/farcaster/frame`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deleteNeynarFrameRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of frames made by the developer (identified by API key)
         * @summary Retrieve a list of frames
         * @param {string} apiKey API key required for authentication.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchNeynarFrames: async (apiKey, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('fetchNeynarFrames', 'apiKey', apiKey);
            const localVarPath = `/farcaster/frame/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a frame by UUID, if it was made by the developer (identified by API key)
         * @summary Retrieve a frame by UUID
         * @param {string} apiKey API key required for authentication.
         * @param {string} uuid UUID of the frame to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lookupNeynarFrame: async (apiKey, uuid, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('lookupNeynarFrame', 'apiKey', apiKey);
            // verify required parameter 'uuid' is not null or undefined
            (0, common_1.assertParamExists)('lookupNeynarFrame', 'uuid', uuid);
            const localVarPath = `/farcaster/frame`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (uuid !== undefined) {
                localVarQueryParameter['uuid'] = uuid;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post a frame action \\ (In order to post a frame action, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds.
         * @summary Posts a frame action
         * @param {string} apiKey API key required for authentication.
         * @param {FrameActionReqBody} frameActionReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFrameAction: async (apiKey, frameActionReqBody, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('postFrameAction', 'apiKey', apiKey);
            // verify required parameter 'frameActionReqBody' is not null or undefined
            (0, common_1.assertParamExists)('postFrameAction', 'frameActionReqBody', frameActionReqBody);
            const localVarPath = `/farcaster/frame/action`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(frameActionReqBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new frame with a list of pages.
         * @summary Create a new frame
         * @param {string} apiKey API key required for authentication.
         * @param {NeynarFrameCreationRequest} neynarFrameCreationRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishNeynarFrame: async (apiKey, neynarFrameCreationRequest, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('publishNeynarFrame', 'apiKey', apiKey);
            // verify required parameter 'neynarFrameCreationRequest' is not null or undefined
            (0, common_1.assertParamExists)('publishNeynarFrame', 'neynarFrameCreationRequest', neynarFrameCreationRequest);
            const localVarPath = `/farcaster/frame`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(neynarFrameCreationRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
         * @summary Update an existing frame
         * @param {string} apiKey API key required for authentication.
         * @param {NeynarFrameUpdateRequest} neynarFrameUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNeynarFrame: async (apiKey, neynarFrameUpdateRequest, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('updateNeynarFrame', 'apiKey', apiKey);
            // verify required parameter 'neynarFrameUpdateRequest' is not null or undefined
            (0, common_1.assertParamExists)('updateNeynarFrame', 'neynarFrameUpdateRequest', neynarFrameUpdateRequest);
            const localVarPath = `/farcaster/frame`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(neynarFrameUpdateRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validates a frame against by an interacting user against a Farcaster Hub \\ (In order to validate a frame, message bytes from Frame Action must be provided in hex)
         * @summary Validates a frame action against Farcaster Hub
         * @param {string} apiKey API key required for authentication.
         * @param {ValidateFrameRequest} validateFrameRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateFrame: async (apiKey, validateFrameRequest, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('validateFrame', 'apiKey', apiKey);
            // verify required parameter 'validateFrameRequest' is not null or undefined
            (0, common_1.assertParamExists)('validateFrame', 'validateFrameRequest', validateFrameRequest);
            const localVarPath = `/farcaster/frame/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(validateFrameRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve analytics for total-interactors, interactors, nteractions-per-cast and input-text.
         * @summary Retrieve analytics for the frame
         * @param {string} apiKey API key required for authentication.
         * @param {string} frameUrl
         * @param {ValidateFrameAnalyticsType} analyticsType
         * @param {string} start
         * @param {string} stop
         * @param {'10s' | '1m' | '2m' | '20m' | '30m' | '2h' | '12h' | '1d' | '7d'} [aggregateWindow] Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateFrameAnalytics: async (apiKey, frameUrl, analyticsType, start, stop, aggregateWindow, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('validateFrameAnalytics', 'apiKey', apiKey);
            // verify required parameter 'frameUrl' is not null or undefined
            (0, common_1.assertParamExists)('validateFrameAnalytics', 'frameUrl', frameUrl);
            // verify required parameter 'analyticsType' is not null or undefined
            (0, common_1.assertParamExists)('validateFrameAnalytics', 'analyticsType', analyticsType);
            // verify required parameter 'start' is not null or undefined
            (0, common_1.assertParamExists)('validateFrameAnalytics', 'start', start);
            // verify required parameter 'stop' is not null or undefined
            (0, common_1.assertParamExists)('validateFrameAnalytics', 'stop', stop);
            const localVarPath = `/farcaster/frame/validate/analytics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (frameUrl !== undefined) {
                localVarQueryParameter['frame_url'] = frameUrl;
            }
            if (analyticsType !== undefined) {
                localVarQueryParameter['analytics_type'] = analyticsType;
            }
            if (start !== undefined) {
                localVarQueryParameter['start'] = (start instanceof Date) ?
                    start.toISOString() :
                    start;
            }
            if (stop !== undefined) {
                localVarQueryParameter['stop'] = (stop instanceof Date) ?
                    stop.toISOString() :
                    stop;
            }
            if (aggregateWindow !== undefined) {
                localVarQueryParameter['aggregate_window'] = aggregateWindow;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all the frames validated by a user
         * @summary Retrieve a list of all the frames validated by a user
         * @param {string} apiKey API key required for authentication.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateFrameList: async (apiKey, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('validateFrameList', 'apiKey', apiKey);
            const localVarPath = `/farcaster/frame/validate/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.FrameApiAxiosParamCreator = FrameApiAxiosParamCreator;
/**
 * FrameApi - functional programming interface
 * @export
 */
const FrameApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.FrameApiAxiosParamCreator)(configuration);
    return {
        /**
         * Delete an existing frame, if it was made by the developer (identified by API key)
         * @summary Delete a frame
         * @param {string} apiKey API key required for authentication.
         * @param {DeleteNeynarFrameRequest} deleteNeynarFrameRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNeynarFrame(apiKey, deleteNeynarFrameRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNeynarFrame(apiKey, deleteNeynarFrameRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Retrieve a list of frames made by the developer (identified by API key)
         * @summary Retrieve a list of frames
         * @param {string} apiKey API key required for authentication.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchNeynarFrames(apiKey, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchNeynarFrames(apiKey, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Retrieve a frame by UUID, if it was made by the developer (identified by API key)
         * @summary Retrieve a frame by UUID
         * @param {string} apiKey API key required for authentication.
         * @param {string} uuid UUID of the frame to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lookupNeynarFrame(apiKey, uuid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupNeynarFrame(apiKey, uuid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Post a frame action \\ (In order to post a frame action, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds.
         * @summary Posts a frame action
         * @param {string} apiKey API key required for authentication.
         * @param {FrameActionReqBody} frameActionReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFrameAction(apiKey, frameActionReqBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFrameAction(apiKey, frameActionReqBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Create a new frame with a list of pages.
         * @summary Create a new frame
         * @param {string} apiKey API key required for authentication.
         * @param {NeynarFrameCreationRequest} neynarFrameCreationRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishNeynarFrame(apiKey, neynarFrameCreationRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishNeynarFrame(apiKey, neynarFrameCreationRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
         * @summary Update an existing frame
         * @param {string} apiKey API key required for authentication.
         * @param {NeynarFrameUpdateRequest} neynarFrameUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNeynarFrame(apiKey, neynarFrameUpdateRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNeynarFrame(apiKey, neynarFrameUpdateRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Validates a frame against by an interacting user against a Farcaster Hub \\ (In order to validate a frame, message bytes from Frame Action must be provided in hex)
         * @summary Validates a frame action against Farcaster Hub
         * @param {string} apiKey API key required for authentication.
         * @param {ValidateFrameRequest} validateFrameRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateFrame(apiKey, validateFrameRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateFrame(apiKey, validateFrameRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Retrieve analytics for total-interactors, interactors, nteractions-per-cast and input-text.
         * @summary Retrieve analytics for the frame
         * @param {string} apiKey API key required for authentication.
         * @param {string} frameUrl
         * @param {ValidateFrameAnalyticsType} analyticsType
         * @param {string} start
         * @param {string} stop
         * @param {'10s' | '1m' | '2m' | '20m' | '30m' | '2h' | '12h' | '1d' | '7d'} [aggregateWindow] Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateFrameAnalytics(apiKey, frameUrl, analyticsType, start, stop, aggregateWindow, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateFrameAnalytics(apiKey, frameUrl, analyticsType, start, stop, aggregateWindow, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Retrieve a list of all the frames validated by a user
         * @summary Retrieve a list of all the frames validated by a user
         * @param {string} apiKey API key required for authentication.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateFrameList(apiKey, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateFrameList(apiKey, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.FrameApiFp = FrameApiFp;
/**
 * FrameApi - factory interface
 * @export
 */
const FrameApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.FrameApiFp)(configuration);
    return {
        /**
         * Delete an existing frame, if it was made by the developer (identified by API key)
         * @summary Delete a frame
         * @param {string} apiKey API key required for authentication.
         * @param {DeleteNeynarFrameRequest} deleteNeynarFrameRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNeynarFrame(apiKey, deleteNeynarFrameRequest, options) {
            return localVarFp.deleteNeynarFrame(apiKey, deleteNeynarFrameRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of frames made by the developer (identified by API key)
         * @summary Retrieve a list of frames
         * @param {string} apiKey API key required for authentication.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchNeynarFrames(apiKey, options) {
            return localVarFp.fetchNeynarFrames(apiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a frame by UUID, if it was made by the developer (identified by API key)
         * @summary Retrieve a frame by UUID
         * @param {string} apiKey API key required for authentication.
         * @param {string} uuid UUID of the frame to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lookupNeynarFrame(apiKey, uuid, options) {
            return localVarFp.lookupNeynarFrame(apiKey, uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Post a frame action \\ (In order to post a frame action, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds.
         * @summary Posts a frame action
         * @param {string} apiKey API key required for authentication.
         * @param {FrameActionReqBody} frameActionReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFrameAction(apiKey, frameActionReqBody, options) {
            return localVarFp.postFrameAction(apiKey, frameActionReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new frame with a list of pages.
         * @summary Create a new frame
         * @param {string} apiKey API key required for authentication.
         * @param {NeynarFrameCreationRequest} neynarFrameCreationRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishNeynarFrame(apiKey, neynarFrameCreationRequest, options) {
            return localVarFp.publishNeynarFrame(apiKey, neynarFrameCreationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
         * @summary Update an existing frame
         * @param {string} apiKey API key required for authentication.
         * @param {NeynarFrameUpdateRequest} neynarFrameUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNeynarFrame(apiKey, neynarFrameUpdateRequest, options) {
            return localVarFp.updateNeynarFrame(apiKey, neynarFrameUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Validates a frame against by an interacting user against a Farcaster Hub \\ (In order to validate a frame, message bytes from Frame Action must be provided in hex)
         * @summary Validates a frame action against Farcaster Hub
         * @param {string} apiKey API key required for authentication.
         * @param {ValidateFrameRequest} validateFrameRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateFrame(apiKey, validateFrameRequest, options) {
            return localVarFp.validateFrame(apiKey, validateFrameRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve analytics for total-interactors, interactors, nteractions-per-cast and input-text.
         * @summary Retrieve analytics for the frame
         * @param {string} apiKey API key required for authentication.
         * @param {string} frameUrl
         * @param {ValidateFrameAnalyticsType} analyticsType
         * @param {string} start
         * @param {string} stop
         * @param {'10s' | '1m' | '2m' | '20m' | '30m' | '2h' | '12h' | '1d' | '7d'} [aggregateWindow] Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateFrameAnalytics(apiKey, frameUrl, analyticsType, start, stop, aggregateWindow, options) {
            return localVarFp.validateFrameAnalytics(apiKey, frameUrl, analyticsType, start, stop, aggregateWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all the frames validated by a user
         * @summary Retrieve a list of all the frames validated by a user
         * @param {string} apiKey API key required for authentication.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateFrameList(apiKey, options) {
            return localVarFp.validateFrameList(apiKey, options).then((request) => request(axios, basePath));
        },
    };
};
exports.FrameApiFactory = FrameApiFactory;
/**
 * FrameApi - object-oriented interface
 * @export
 * @class FrameApi
 * @extends {BaseAPI}
 */
class FrameApi extends base_1.BaseAPI {
    /**
     * Delete an existing frame, if it was made by the developer (identified by API key)
     * @summary Delete a frame
     * @param {string} apiKey API key required for authentication.
     * @param {DeleteNeynarFrameRequest} deleteNeynarFrameRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    deleteNeynarFrame(apiKey, deleteNeynarFrameRequest, options) {
        return (0, exports.FrameApiFp)(this.configuration).deleteNeynarFrame(apiKey, deleteNeynarFrameRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a list of frames made by the developer (identified by API key)
     * @summary Retrieve a list of frames
     * @param {string} apiKey API key required for authentication.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    fetchNeynarFrames(apiKey, options) {
        return (0, exports.FrameApiFp)(this.configuration).fetchNeynarFrames(apiKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a frame by UUID, if it was made by the developer (identified by API key)
     * @summary Retrieve a frame by UUID
     * @param {string} apiKey API key required for authentication.
     * @param {string} uuid UUID of the frame to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    lookupNeynarFrame(apiKey, uuid, options) {
        return (0, exports.FrameApiFp)(this.configuration).lookupNeynarFrame(apiKey, uuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Post a frame action \\ (In order to post a frame action, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds.
     * @summary Posts a frame action
     * @param {string} apiKey API key required for authentication.
     * @param {FrameActionReqBody} frameActionReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    postFrameAction(apiKey, frameActionReqBody, options) {
        return (0, exports.FrameApiFp)(this.configuration).postFrameAction(apiKey, frameActionReqBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new frame with a list of pages.
     * @summary Create a new frame
     * @param {string} apiKey API key required for authentication.
     * @param {NeynarFrameCreationRequest} neynarFrameCreationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    publishNeynarFrame(apiKey, neynarFrameCreationRequest, options) {
        return (0, exports.FrameApiFp)(this.configuration).publishNeynarFrame(apiKey, neynarFrameCreationRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
     * @summary Update an existing frame
     * @param {string} apiKey API key required for authentication.
     * @param {NeynarFrameUpdateRequest} neynarFrameUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    updateNeynarFrame(apiKey, neynarFrameUpdateRequest, options) {
        return (0, exports.FrameApiFp)(this.configuration).updateNeynarFrame(apiKey, neynarFrameUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Validates a frame against by an interacting user against a Farcaster Hub \\ (In order to validate a frame, message bytes from Frame Action must be provided in hex)
     * @summary Validates a frame action against Farcaster Hub
     * @param {string} apiKey API key required for authentication.
     * @param {ValidateFrameRequest} validateFrameRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    validateFrame(apiKey, validateFrameRequest, options) {
        return (0, exports.FrameApiFp)(this.configuration).validateFrame(apiKey, validateFrameRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve analytics for total-interactors, interactors, nteractions-per-cast and input-text.
     * @summary Retrieve analytics for the frame
     * @param {string} apiKey API key required for authentication.
     * @param {string} frameUrl
     * @param {ValidateFrameAnalyticsType} analyticsType
     * @param {string} start
     * @param {string} stop
     * @param {'10s' | '1m' | '2m' | '20m' | '30m' | '2h' | '12h' | '1d' | '7d'} [aggregateWindow] Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    validateFrameAnalytics(apiKey, frameUrl, analyticsType, start, stop, aggregateWindow, options) {
        return (0, exports.FrameApiFp)(this.configuration).validateFrameAnalytics(apiKey, frameUrl, analyticsType, start, stop, aggregateWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a list of all the frames validated by a user
     * @summary Retrieve a list of all the frames validated by a user
     * @param {string} apiKey API key required for authentication.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    validateFrameList(apiKey, options) {
        return (0, exports.FrameApiFp)(this.configuration).validateFrameList(apiKey, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.FrameApi = FrameApi;
