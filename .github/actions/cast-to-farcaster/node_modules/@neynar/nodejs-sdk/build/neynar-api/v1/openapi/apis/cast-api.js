"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CastApi = exports.CastApiFactory = exports.CastApiFp = exports.CastApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * CastApi - axios parameter creator
 * @export
 */
const CastApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Now deprecated, use [v2/cast/conversation](https://docs.neynar.com/reference/cast-conversation). Gets all casts, including root cast and all replies for a given thread hash. No limit the depth of replies.
         * @summary DEPRECATED - Retrieve all casts in a given thread hash
         * @param {string} apiKey API key required for authentication.
         * @param {string} threadHash The hash of the thread to retrieve casts from.
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        allCastsInThread: async (apiKey, threadHash, viewerFid, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('allCastsInThread', 'apiKey', apiKey);
            // verify required parameter 'threadHash' is not null or undefined
            (0, common_1.assertParamExists)('allCastsInThread', 'threadHash', threadHash);
            const localVarPath = `/farcaster/all-casts-in-thread`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (threadHash !== undefined) {
                localVarQueryParameter['threadHash'] = threadHash;
            }
            if (viewerFid !== undefined) {
                localVarQueryParameter['viewerFid'] = viewerFid;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Now deprecated, use [v2/cast](https://docs.neynar.com/reference/cast). Gets information about an individual cast
         * @summary DEPRECATED - Retrieve cast for a given hash
         * @param {string} apiKey API key required for authentication.
         * @param {string} hash Cast hash
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        cast: async (apiKey, hash, viewerFid, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('cast', 'apiKey', apiKey);
            // verify required parameter 'hash' is not null or undefined
            (0, common_1.assertParamExists)('cast', 'hash', hash);
            const localVarPath = `/farcaster/cast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (hash !== undefined) {
                localVarQueryParameter['hash'] = hash;
            }
            if (viewerFid !== undefined) {
                localVarQueryParameter['viewerFid'] = viewerFid;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the most recent casts for a user
         * @summary Retrieve casts for a given user
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid fid of a user
         * @param {string} [parentUrl] A cast can be part of a certain channel. The channel is identified by &#x60;parent_url&#x60;. All casts in the channel ladder up to the same parent_url.
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {number} [limit] Number of results to retrieve (default 25, max 150)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casts: async (apiKey, fid, parentUrl, viewerFid, limit, cursor, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('casts', 'apiKey', apiKey);
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('casts', 'fid', fid);
            const localVarPath = `/farcaster/casts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (parentUrl !== undefined) {
                localVarQueryParameter['parent_url'] = parentUrl;
            }
            if (viewerFid !== undefined) {
                localVarQueryParameter['viewerFid'] = viewerFid;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of casts from the protocol in reverse chronological order based on timestamp
         * @summary Get Recent Casts
         * @param {string} apiKey API key required for authentication.
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {number} [limit] Number of results to retrieve (default 25, max 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recentCasts: async (apiKey, viewerFid, limit, cursor, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('recentCasts', 'apiKey', apiKey);
            const localVarPath = `/farcaster/recent-casts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (viewerFid !== undefined) {
                localVarQueryParameter['viewerFid'] = viewerFid;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.CastApiAxiosParamCreator = CastApiAxiosParamCreator;
/**
 * CastApi - functional programming interface
 * @export
 */
const CastApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.CastApiAxiosParamCreator)(configuration);
    return {
        /**
         * Now deprecated, use [v2/cast/conversation](https://docs.neynar.com/reference/cast-conversation). Gets all casts, including root cast and all replies for a given thread hash. No limit the depth of replies.
         * @summary DEPRECATED - Retrieve all casts in a given thread hash
         * @param {string} apiKey API key required for authentication.
         * @param {string} threadHash The hash of the thread to retrieve casts from.
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async allCastsInThread(apiKey, threadHash, viewerFid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allCastsInThread(apiKey, threadHash, viewerFid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Now deprecated, use [v2/cast](https://docs.neynar.com/reference/cast). Gets information about an individual cast
         * @summary DEPRECATED - Retrieve cast for a given hash
         * @param {string} apiKey API key required for authentication.
         * @param {string} hash Cast hash
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async cast(apiKey, hash, viewerFid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cast(apiKey, hash, viewerFid, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Gets the most recent casts for a user
         * @summary Retrieve casts for a given user
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid fid of a user
         * @param {string} [parentUrl] A cast can be part of a certain channel. The channel is identified by &#x60;parent_url&#x60;. All casts in the channel ladder up to the same parent_url.
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {number} [limit] Number of results to retrieve (default 25, max 150)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async casts(apiKey, fid, parentUrl, viewerFid, limit, cursor, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.casts(apiKey, fid, parentUrl, viewerFid, limit, cursor, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get a list of casts from the protocol in reverse chronological order based on timestamp
         * @summary Get Recent Casts
         * @param {string} apiKey API key required for authentication.
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {number} [limit] Number of results to retrieve (default 25, max 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recentCasts(apiKey, viewerFid, limit, cursor, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recentCasts(apiKey, viewerFid, limit, cursor, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.CastApiFp = CastApiFp;
/**
 * CastApi - factory interface
 * @export
 */
const CastApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.CastApiFp)(configuration);
    return {
        /**
         * Now deprecated, use [v2/cast/conversation](https://docs.neynar.com/reference/cast-conversation). Gets all casts, including root cast and all replies for a given thread hash. No limit the depth of replies.
         * @summary DEPRECATED - Retrieve all casts in a given thread hash
         * @param {string} apiKey API key required for authentication.
         * @param {string} threadHash The hash of the thread to retrieve casts from.
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        allCastsInThread(apiKey, threadHash, viewerFid, options) {
            return localVarFp.allCastsInThread(apiKey, threadHash, viewerFid, options).then((request) => request(axios, basePath));
        },
        /**
         * Now deprecated, use [v2/cast](https://docs.neynar.com/reference/cast). Gets information about an individual cast
         * @summary DEPRECATED - Retrieve cast for a given hash
         * @param {string} apiKey API key required for authentication.
         * @param {string} hash Cast hash
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        cast(apiKey, hash, viewerFid, options) {
            return localVarFp.cast(apiKey, hash, viewerFid, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the most recent casts for a user
         * @summary Retrieve casts for a given user
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid fid of a user
         * @param {string} [parentUrl] A cast can be part of a certain channel. The channel is identified by &#x60;parent_url&#x60;. All casts in the channel ladder up to the same parent_url.
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {number} [limit] Number of results to retrieve (default 25, max 150)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casts(apiKey, fid, parentUrl, viewerFid, limit, cursor, options) {
            return localVarFp.casts(apiKey, fid, parentUrl, viewerFid, limit, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of casts from the protocol in reverse chronological order based on timestamp
         * @summary Get Recent Casts
         * @param {string} apiKey API key required for authentication.
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {number} [limit] Number of results to retrieve (default 25, max 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recentCasts(apiKey, viewerFid, limit, cursor, options) {
            return localVarFp.recentCasts(apiKey, viewerFid, limit, cursor, options).then((request) => request(axios, basePath));
        },
    };
};
exports.CastApiFactory = CastApiFactory;
/**
 * CastApi - object-oriented interface
 * @export
 * @class CastApi
 * @extends {BaseAPI}
 */
class CastApi extends base_1.BaseAPI {
    /**
     * Now deprecated, use [v2/cast/conversation](https://docs.neynar.com/reference/cast-conversation). Gets all casts, including root cast and all replies for a given thread hash. No limit the depth of replies.
     * @summary DEPRECATED - Retrieve all casts in a given thread hash
     * @param {string} apiKey API key required for authentication.
     * @param {string} threadHash The hash of the thread to retrieve casts from.
     * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CastApi
     */
    allCastsInThread(apiKey, threadHash, viewerFid, options) {
        return (0, exports.CastApiFp)(this.configuration).allCastsInThread(apiKey, threadHash, viewerFid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Now deprecated, use [v2/cast](https://docs.neynar.com/reference/cast). Gets information about an individual cast
     * @summary DEPRECATED - Retrieve cast for a given hash
     * @param {string} apiKey API key required for authentication.
     * @param {string} hash Cast hash
     * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CastApi
     */
    cast(apiKey, hash, viewerFid, options) {
        return (0, exports.CastApiFp)(this.configuration).cast(apiKey, hash, viewerFid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets the most recent casts for a user
     * @summary Retrieve casts for a given user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid fid of a user
     * @param {string} [parentUrl] A cast can be part of a certain channel. The channel is identified by &#x60;parent_url&#x60;. All casts in the channel ladder up to the same parent_url.
     * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
     * @param {number} [limit] Number of results to retrieve (default 25, max 150)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     */
    casts(apiKey, fid, parentUrl, viewerFid, limit, cursor, options) {
        return (0, exports.CastApiFp)(this.configuration).casts(apiKey, fid, parentUrl, viewerFid, limit, cursor, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of casts from the protocol in reverse chronological order based on timestamp
     * @summary Get Recent Casts
     * @param {string} apiKey API key required for authentication.
     * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     */
    recentCasts(apiKey, viewerFid, limit, cursor, options) {
        return (0, exports.CastApiFp)(this.configuration).recentCasts(apiKey, viewerFid, limit, cursor, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CastApi = CastApi;
