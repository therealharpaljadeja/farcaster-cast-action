/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { DeleteFrameResponse } from '../models';
import { DeleteNeynarFrameRequest } from '../models';
import { Frame } from '../models';
import { FrameActionReqBody } from '../models';
import { FrameValidateAnalyticsResponse } from '../models';
import { FrameValidateListResponse } from '../models';
import { NeynarFrame } from '../models';
import { NeynarFrameCreationRequest } from '../models';
import { NeynarFrameUpdateRequest } from '../models';
import { ValidateFrameActionResponse } from '../models';
import { ValidateFrameAnalyticsType } from '../models';
import { ValidateFrameRequest } from '../models';
/**
 * FrameApi - axios parameter creator
 * @export
 */
export declare const FrameApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete an existing frame, if it was made by the developer (identified by API key)
     * @summary Delete a frame
     * @param {string} apiKey API key required for authentication.
     * @param {DeleteNeynarFrameRequest} deleteNeynarFrameRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteNeynarFrame: (apiKey: string, deleteNeynarFrameRequest: DeleteNeynarFrameRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a list of frames made by the developer (identified by API key)
     * @summary Retrieve a list of frames
     * @param {string} apiKey API key required for authentication.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchNeynarFrames: (apiKey: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a frame by UUID, if it was made by the developer (identified by API key)
     * @summary Retrieve a frame by UUID
     * @param {string} apiKey API key required for authentication.
     * @param {string} uuid UUID of the frame to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookupNeynarFrame: (apiKey: string, uuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Post a frame action \\ (In order to post a frame action, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds.
     * @summary Posts a frame action
     * @param {string} apiKey API key required for authentication.
     * @param {FrameActionReqBody} frameActionReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postFrameAction: (apiKey: string, frameActionReqBody: FrameActionReqBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new frame with a list of pages.
     * @summary Create a new frame
     * @param {string} apiKey API key required for authentication.
     * @param {NeynarFrameCreationRequest} neynarFrameCreationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishNeynarFrame: (apiKey: string, neynarFrameCreationRequest: NeynarFrameCreationRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
     * @summary Update an existing frame
     * @param {string} apiKey API key required for authentication.
     * @param {NeynarFrameUpdateRequest} neynarFrameUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNeynarFrame: (apiKey: string, neynarFrameUpdateRequest: NeynarFrameUpdateRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Validates a frame against by an interacting user against a Farcaster Hub \\ (In order to validate a frame, message bytes from Frame Action must be provided in hex)
     * @summary Validates a frame action against Farcaster Hub
     * @param {string} apiKey API key required for authentication.
     * @param {ValidateFrameRequest} validateFrameRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateFrame: (apiKey: string, validateFrameRequest: ValidateFrameRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve analytics for total-interactors, interactors, nteractions-per-cast and input-text.
     * @summary Retrieve analytics for the frame
     * @param {string} apiKey API key required for authentication.
     * @param {string} frameUrl
     * @param {ValidateFrameAnalyticsType} analyticsType
     * @param {string} start
     * @param {string} stop
     * @param {'10s' | '1m' | '2m' | '20m' | '30m' | '2h' | '12h' | '1d' | '7d'} [aggregateWindow] Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateFrameAnalytics: (apiKey: string, frameUrl: string, analyticsType: ValidateFrameAnalyticsType, start: string, stop: string, aggregateWindow?: '10s' | '1m' | '2m' | '20m' | '30m' | '2h' | '12h' | '1d' | '7d', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a list of all the frames validated by a user
     * @summary Retrieve a list of all the frames validated by a user
     * @param {string} apiKey API key required for authentication.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateFrameList: (apiKey: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FrameApi - functional programming interface
 * @export
 */
export declare const FrameApiFp: (configuration?: Configuration) => {
    /**
     * Delete an existing frame, if it was made by the developer (identified by API key)
     * @summary Delete a frame
     * @param {string} apiKey API key required for authentication.
     * @param {DeleteNeynarFrameRequest} deleteNeynarFrameRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteNeynarFrame(apiKey: string, deleteNeynarFrameRequest: DeleteNeynarFrameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteFrameResponse>>;
    /**
     * Retrieve a list of frames made by the developer (identified by API key)
     * @summary Retrieve a list of frames
     * @param {string} apiKey API key required for authentication.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchNeynarFrames(apiKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NeynarFrame>>>;
    /**
     * Retrieve a frame by UUID, if it was made by the developer (identified by API key)
     * @summary Retrieve a frame by UUID
     * @param {string} apiKey API key required for authentication.
     * @param {string} uuid UUID of the frame to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookupNeynarFrame(apiKey: string, uuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NeynarFrame>>;
    /**
     * Post a frame action \\ (In order to post a frame action, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds.
     * @summary Posts a frame action
     * @param {string} apiKey API key required for authentication.
     * @param {FrameActionReqBody} frameActionReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postFrameAction(apiKey: string, frameActionReqBody: FrameActionReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Frame>>;
    /**
     * Create a new frame with a list of pages.
     * @summary Create a new frame
     * @param {string} apiKey API key required for authentication.
     * @param {NeynarFrameCreationRequest} neynarFrameCreationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishNeynarFrame(apiKey: string, neynarFrameCreationRequest: NeynarFrameCreationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NeynarFrame>>;
    /**
     * Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
     * @summary Update an existing frame
     * @param {string} apiKey API key required for authentication.
     * @param {NeynarFrameUpdateRequest} neynarFrameUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNeynarFrame(apiKey: string, neynarFrameUpdateRequest: NeynarFrameUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NeynarFrame>>;
    /**
     * Validates a frame against by an interacting user against a Farcaster Hub \\ (In order to validate a frame, message bytes from Frame Action must be provided in hex)
     * @summary Validates a frame action against Farcaster Hub
     * @param {string} apiKey API key required for authentication.
     * @param {ValidateFrameRequest} validateFrameRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateFrame(apiKey: string, validateFrameRequest: ValidateFrameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidateFrameActionResponse>>;
    /**
     * Retrieve analytics for total-interactors, interactors, nteractions-per-cast and input-text.
     * @summary Retrieve analytics for the frame
     * @param {string} apiKey API key required for authentication.
     * @param {string} frameUrl
     * @param {ValidateFrameAnalyticsType} analyticsType
     * @param {string} start
     * @param {string} stop
     * @param {'10s' | '1m' | '2m' | '20m' | '30m' | '2h' | '12h' | '1d' | '7d'} [aggregateWindow] Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateFrameAnalytics(apiKey: string, frameUrl: string, analyticsType: ValidateFrameAnalyticsType, start: string, stop: string, aggregateWindow?: '10s' | '1m' | '2m' | '20m' | '30m' | '2h' | '12h' | '1d' | '7d', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FrameValidateAnalyticsResponse>>;
    /**
     * Retrieve a list of all the frames validated by a user
     * @summary Retrieve a list of all the frames validated by a user
     * @param {string} apiKey API key required for authentication.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateFrameList(apiKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FrameValidateListResponse>>;
};
/**
 * FrameApi - factory interface
 * @export
 */
export declare const FrameApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete an existing frame, if it was made by the developer (identified by API key)
     * @summary Delete a frame
     * @param {string} apiKey API key required for authentication.
     * @param {DeleteNeynarFrameRequest} deleteNeynarFrameRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteNeynarFrame(apiKey: string, deleteNeynarFrameRequest: DeleteNeynarFrameRequest, options?: any): AxiosPromise<DeleteFrameResponse>;
    /**
     * Retrieve a list of frames made by the developer (identified by API key)
     * @summary Retrieve a list of frames
     * @param {string} apiKey API key required for authentication.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchNeynarFrames(apiKey: string, options?: any): AxiosPromise<Array<NeynarFrame>>;
    /**
     * Retrieve a frame by UUID, if it was made by the developer (identified by API key)
     * @summary Retrieve a frame by UUID
     * @param {string} apiKey API key required for authentication.
     * @param {string} uuid UUID of the frame to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookupNeynarFrame(apiKey: string, uuid: string, options?: any): AxiosPromise<NeynarFrame>;
    /**
     * Post a frame action \\ (In order to post a frame action, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds.
     * @summary Posts a frame action
     * @param {string} apiKey API key required for authentication.
     * @param {FrameActionReqBody} frameActionReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postFrameAction(apiKey: string, frameActionReqBody: FrameActionReqBody, options?: any): AxiosPromise<Frame>;
    /**
     * Create a new frame with a list of pages.
     * @summary Create a new frame
     * @param {string} apiKey API key required for authentication.
     * @param {NeynarFrameCreationRequest} neynarFrameCreationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishNeynarFrame(apiKey: string, neynarFrameCreationRequest: NeynarFrameCreationRequest, options?: any): AxiosPromise<NeynarFrame>;
    /**
     * Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
     * @summary Update an existing frame
     * @param {string} apiKey API key required for authentication.
     * @param {NeynarFrameUpdateRequest} neynarFrameUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNeynarFrame(apiKey: string, neynarFrameUpdateRequest: NeynarFrameUpdateRequest, options?: any): AxiosPromise<NeynarFrame>;
    /**
     * Validates a frame against by an interacting user against a Farcaster Hub \\ (In order to validate a frame, message bytes from Frame Action must be provided in hex)
     * @summary Validates a frame action against Farcaster Hub
     * @param {string} apiKey API key required for authentication.
     * @param {ValidateFrameRequest} validateFrameRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateFrame(apiKey: string, validateFrameRequest: ValidateFrameRequest, options?: any): AxiosPromise<ValidateFrameActionResponse>;
    /**
     * Retrieve analytics for total-interactors, interactors, nteractions-per-cast and input-text.
     * @summary Retrieve analytics for the frame
     * @param {string} apiKey API key required for authentication.
     * @param {string} frameUrl
     * @param {ValidateFrameAnalyticsType} analyticsType
     * @param {string} start
     * @param {string} stop
     * @param {'10s' | '1m' | '2m' | '20m' | '30m' | '2h' | '12h' | '1d' | '7d'} [aggregateWindow] Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateFrameAnalytics(apiKey: string, frameUrl: string, analyticsType: ValidateFrameAnalyticsType, start: string, stop: string, aggregateWindow?: '10s' | '1m' | '2m' | '20m' | '30m' | '2h' | '12h' | '1d' | '7d', options?: any): AxiosPromise<FrameValidateAnalyticsResponse>;
    /**
     * Retrieve a list of all the frames validated by a user
     * @summary Retrieve a list of all the frames validated by a user
     * @param {string} apiKey API key required for authentication.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateFrameList(apiKey: string, options?: any): AxiosPromise<FrameValidateListResponse>;
};
/**
 * FrameApi - object-oriented interface
 * @export
 * @class FrameApi
 * @extends {BaseAPI}
 */
export declare class FrameApi extends BaseAPI {
    /**
     * Delete an existing frame, if it was made by the developer (identified by API key)
     * @summary Delete a frame
     * @param {string} apiKey API key required for authentication.
     * @param {DeleteNeynarFrameRequest} deleteNeynarFrameRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    deleteNeynarFrame(apiKey: string, deleteNeynarFrameRequest: DeleteNeynarFrameRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteFrameResponse, any>>;
    /**
     * Retrieve a list of frames made by the developer (identified by API key)
     * @summary Retrieve a list of frames
     * @param {string} apiKey API key required for authentication.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    fetchNeynarFrames(apiKey: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NeynarFrame[], any>>;
    /**
     * Retrieve a frame by UUID, if it was made by the developer (identified by API key)
     * @summary Retrieve a frame by UUID
     * @param {string} apiKey API key required for authentication.
     * @param {string} uuid UUID of the frame to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    lookupNeynarFrame(apiKey: string, uuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NeynarFrame, any>>;
    /**
     * Post a frame action \\ (In order to post a frame action, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds.
     * @summary Posts a frame action
     * @param {string} apiKey API key required for authentication.
     * @param {FrameActionReqBody} frameActionReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    postFrameAction(apiKey: string, frameActionReqBody: FrameActionReqBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Frame, any>>;
    /**
     * Create a new frame with a list of pages.
     * @summary Create a new frame
     * @param {string} apiKey API key required for authentication.
     * @param {NeynarFrameCreationRequest} neynarFrameCreationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    publishNeynarFrame(apiKey: string, neynarFrameCreationRequest: NeynarFrameCreationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NeynarFrame, any>>;
    /**
     * Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
     * @summary Update an existing frame
     * @param {string} apiKey API key required for authentication.
     * @param {NeynarFrameUpdateRequest} neynarFrameUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    updateNeynarFrame(apiKey: string, neynarFrameUpdateRequest: NeynarFrameUpdateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NeynarFrame, any>>;
    /**
     * Validates a frame against by an interacting user against a Farcaster Hub \\ (In order to validate a frame, message bytes from Frame Action must be provided in hex)
     * @summary Validates a frame action against Farcaster Hub
     * @param {string} apiKey API key required for authentication.
     * @param {ValidateFrameRequest} validateFrameRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    validateFrame(apiKey: string, validateFrameRequest: ValidateFrameRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ValidateFrameActionResponse, any>>;
    /**
     * Retrieve analytics for total-interactors, interactors, nteractions-per-cast and input-text.
     * @summary Retrieve analytics for the frame
     * @param {string} apiKey API key required for authentication.
     * @param {string} frameUrl
     * @param {ValidateFrameAnalyticsType} analyticsType
     * @param {string} start
     * @param {string} stop
     * @param {'10s' | '1m' | '2m' | '20m' | '30m' | '2h' | '12h' | '1d' | '7d'} [aggregateWindow] Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    validateFrameAnalytics(apiKey: string, frameUrl: string, analyticsType: ValidateFrameAnalyticsType, start: string, stop: string, aggregateWindow?: '10s' | '1m' | '2m' | '20m' | '30m' | '2h' | '12h' | '1d' | '7d', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FrameValidateAnalyticsResponse, any>>;
    /**
     * Retrieve a list of all the frames validated by a user
     * @summary Retrieve a list of all the frames validated by a user
     * @param {string} apiKey API key required for authentication.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    validateFrameList(apiKey: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FrameValidateListResponse, any>>;
}
