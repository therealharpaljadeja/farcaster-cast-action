/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/base';
import { ChannelListResponse } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/models';
import { ChannelResponse } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/models';
import { ChannelSearchResponse } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/models';
import { TrendingChannelResponse } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/models';
import { UsersActiveChannelsResponse } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/models';
import { UsersResponse } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/models';
/**
 * ChannelApi - axios parameter creator
 * @export
 */
export declare const ChannelApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Fetches all channels that a user has casted in, in reverse chronological order.
     * @summary Get channels that a user is active in
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid The user\&#39;s fid (identifier)
     * @param {number} [limit] Number of results to retrieve (default 20, max 100).
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activeChannels: (apiKey: string, fid: number, limit?: number, cursor?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns details of a channel
     * @summary Retrieve channel details by id
     * @param {string} apiKey API key required for authentication.
     * @param {string} id Channel ID for the channel being queried
     * @param {number} [viewerFid] FID of the user viewing the channel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelDetails: (apiKey: string, id: string, viewerFid?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of followers for a specific channel. Max limit is 1000. Use cursor for pagination.
     * @summary Retrieve followers for a given channel
     * @param {string} apiKey API key required for authentication.
     * @param {string} id Channel ID for the channel being queried
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [limit] Number of followers to retrieve (default 25, max 1000)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelFollowers: (apiKey: string, id: string, cursor?: string, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of users who are active in a given channel, ordered by ascending FIDs
     * @summary Retrieve users who are active in a channel
     * @param {string} apiKey API key required for authentication.
     * @param {string} id Channel ID for the channel being queried
     * @param {boolean} hasRootCastAuthors Include users who posted the root cast in the channel
     * @param {boolean} [hasCastLikers] Include users who liked a cast in the channel
     * @param {boolean} [hasCastRecasters] Include users who recasted a cast in the channel
     * @param {boolean} [hasReplyAuthors] Include users who replied to a cast in the channel
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelUsers: (apiKey: string, id: string, hasRootCastAuthors: boolean, hasCastLikers?: boolean, hasCastRecasters?: boolean, hasReplyAuthors?: boolean, cursor?: string, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of all channels with their details
     * @summary Retrieve all channels with their details
     * @param {string} apiKey API key required for authentication.
     * @param {number} [limit] Number of results to retrieve (default 25, max 50)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllChannels: (apiKey: string, limit?: number, cursor?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of channels based on id or name
     * @summary Search for channels based on id or name
     * @param {string} apiKey API key required for authentication.
     * @param {string} q Channel ID or name for the channel being queried
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchChannels: (apiKey: string, q: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of trending channels based on activity
     * @summary Retrieve trending channels based on activity
     * @param {string} apiKey API key required for authentication.
     * @param {'1d' | '7d' | '30d'} [timeWindow]
     * @param {number} [limit] Number of results to retrieve (default 10, max 25)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    trendingChannels: (apiKey: string, timeWindow?: '1d' | '7d' | '30d', limit?: number, cursor?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of all channels with their details that a fid follows.
     * @summary Retrieve all channels that a given fid follows
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid The fid of the user.
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userChannels: (apiKey: string, fid: number, limit?: number, cursor?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ChannelApi - functional programming interface
 * @export
 */
export declare const ChannelApiFp: (configuration?: Configuration) => {
    /**
     * Fetches all channels that a user has casted in, in reverse chronological order.
     * @summary Get channels that a user is active in
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid The user\&#39;s fid (identifier)
     * @param {number} [limit] Number of results to retrieve (default 20, max 100).
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activeChannels(apiKey: string, fid: number, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersActiveChannelsResponse>>;
    /**
     * Returns details of a channel
     * @summary Retrieve channel details by id
     * @param {string} apiKey API key required for authentication.
     * @param {string} id Channel ID for the channel being queried
     * @param {number} [viewerFid] FID of the user viewing the channel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelDetails(apiKey: string, id: string, viewerFid?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelResponse>>;
    /**
     * Returns a list of followers for a specific channel. Max limit is 1000. Use cursor for pagination.
     * @summary Retrieve followers for a given channel
     * @param {string} apiKey API key required for authentication.
     * @param {string} id Channel ID for the channel being queried
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [limit] Number of followers to retrieve (default 25, max 1000)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelFollowers(apiKey: string, id: string, cursor?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersResponse>>;
    /**
     * Returns a list of users who are active in a given channel, ordered by ascending FIDs
     * @summary Retrieve users who are active in a channel
     * @param {string} apiKey API key required for authentication.
     * @param {string} id Channel ID for the channel being queried
     * @param {boolean} hasRootCastAuthors Include users who posted the root cast in the channel
     * @param {boolean} [hasCastLikers] Include users who liked a cast in the channel
     * @param {boolean} [hasCastRecasters] Include users who recasted a cast in the channel
     * @param {boolean} [hasReplyAuthors] Include users who replied to a cast in the channel
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelUsers(apiKey: string, id: string, hasRootCastAuthors: boolean, hasCastLikers?: boolean, hasCastRecasters?: boolean, hasReplyAuthors?: boolean, cursor?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersResponse>>;
    /**
     * Returns a list of all channels with their details
     * @summary Retrieve all channels with their details
     * @param {string} apiKey API key required for authentication.
     * @param {number} [limit] Number of results to retrieve (default 25, max 50)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllChannels(apiKey: string, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelListResponse>>;
    /**
     * Returns a list of channels based on id or name
     * @summary Search for channels based on id or name
     * @param {string} apiKey API key required for authentication.
     * @param {string} q Channel ID or name for the channel being queried
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchChannels(apiKey: string, q: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelSearchResponse>>;
    /**
     * Returns a list of trending channels based on activity
     * @summary Retrieve trending channels based on activity
     * @param {string} apiKey API key required for authentication.
     * @param {'1d' | '7d' | '30d'} [timeWindow]
     * @param {number} [limit] Number of results to retrieve (default 10, max 25)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    trendingChannels(apiKey: string, timeWindow?: '1d' | '7d' | '30d', limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrendingChannelResponse>>;
    /**
     * Returns a list of all channels with their details that a fid follows.
     * @summary Retrieve all channels that a given fid follows
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid The fid of the user.
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userChannels(apiKey: string, fid: number, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelListResponse>>;
};
/**
 * ChannelApi - factory interface
 * @export
 */
export declare const ChannelApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Fetches all channels that a user has casted in, in reverse chronological order.
     * @summary Get channels that a user is active in
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid The user\&#39;s fid (identifier)
     * @param {number} [limit] Number of results to retrieve (default 20, max 100).
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activeChannels(apiKey: string, fid: number, limit?: number, cursor?: string, options?: any): AxiosPromise<UsersActiveChannelsResponse>;
    /**
     * Returns details of a channel
     * @summary Retrieve channel details by id
     * @param {string} apiKey API key required for authentication.
     * @param {string} id Channel ID for the channel being queried
     * @param {number} [viewerFid] FID of the user viewing the channel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelDetails(apiKey: string, id: string, viewerFid?: number, options?: any): AxiosPromise<ChannelResponse>;
    /**
     * Returns a list of followers for a specific channel. Max limit is 1000. Use cursor for pagination.
     * @summary Retrieve followers for a given channel
     * @param {string} apiKey API key required for authentication.
     * @param {string} id Channel ID for the channel being queried
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [limit] Number of followers to retrieve (default 25, max 1000)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelFollowers(apiKey: string, id: string, cursor?: string, limit?: number, options?: any): AxiosPromise<UsersResponse>;
    /**
     * Returns a list of users who are active in a given channel, ordered by ascending FIDs
     * @summary Retrieve users who are active in a channel
     * @param {string} apiKey API key required for authentication.
     * @param {string} id Channel ID for the channel being queried
     * @param {boolean} hasRootCastAuthors Include users who posted the root cast in the channel
     * @param {boolean} [hasCastLikers] Include users who liked a cast in the channel
     * @param {boolean} [hasCastRecasters] Include users who recasted a cast in the channel
     * @param {boolean} [hasReplyAuthors] Include users who replied to a cast in the channel
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelUsers(apiKey: string, id: string, hasRootCastAuthors: boolean, hasCastLikers?: boolean, hasCastRecasters?: boolean, hasReplyAuthors?: boolean, cursor?: string, limit?: number, options?: any): AxiosPromise<UsersResponse>;
    /**
     * Returns a list of all channels with their details
     * @summary Retrieve all channels with their details
     * @param {string} apiKey API key required for authentication.
     * @param {number} [limit] Number of results to retrieve (default 25, max 50)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllChannels(apiKey: string, limit?: number, cursor?: string, options?: any): AxiosPromise<ChannelListResponse>;
    /**
     * Returns a list of channels based on id or name
     * @summary Search for channels based on id or name
     * @param {string} apiKey API key required for authentication.
     * @param {string} q Channel ID or name for the channel being queried
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchChannels(apiKey: string, q: string, options?: any): AxiosPromise<ChannelSearchResponse>;
    /**
     * Returns a list of trending channels based on activity
     * @summary Retrieve trending channels based on activity
     * @param {string} apiKey API key required for authentication.
     * @param {'1d' | '7d' | '30d'} [timeWindow]
     * @param {number} [limit] Number of results to retrieve (default 10, max 25)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    trendingChannels(apiKey: string, timeWindow?: '1d' | '7d' | '30d', limit?: number, cursor?: string, options?: any): AxiosPromise<TrendingChannelResponse>;
    /**
     * Returns a list of all channels with their details that a fid follows.
     * @summary Retrieve all channels that a given fid follows
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid The fid of the user.
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userChannels(apiKey: string, fid: number, limit?: number, cursor?: string, options?: any): AxiosPromise<ChannelListResponse>;
};
/**
 * ChannelApi - object-oriented interface
 * @export
 * @class ChannelApi
 * @extends {BaseAPI}
 */
export declare class ChannelApi extends BaseAPI {
    /**
     * Fetches all channels that a user has casted in, in reverse chronological order.
     * @summary Get channels that a user is active in
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid The user\&#39;s fid (identifier)
     * @param {number} [limit] Number of results to retrieve (default 20, max 100).
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    activeChannels(apiKey: string, fid: number, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UsersActiveChannelsResponse, any>>;
    /**
     * Returns details of a channel
     * @summary Retrieve channel details by id
     * @param {string} apiKey API key required for authentication.
     * @param {string} id Channel ID for the channel being queried
     * @param {number} [viewerFid] FID of the user viewing the channel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelDetails(apiKey: string, id: string, viewerFid?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ChannelResponse, any>>;
    /**
     * Returns a list of followers for a specific channel. Max limit is 1000. Use cursor for pagination.
     * @summary Retrieve followers for a given channel
     * @param {string} apiKey API key required for authentication.
     * @param {string} id Channel ID for the channel being queried
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [limit] Number of followers to retrieve (default 25, max 1000)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelFollowers(apiKey: string, id: string, cursor?: string, limit?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UsersResponse, any>>;
    /**
     * Returns a list of users who are active in a given channel, ordered by ascending FIDs
     * @summary Retrieve users who are active in a channel
     * @param {string} apiKey API key required for authentication.
     * @param {string} id Channel ID for the channel being queried
     * @param {boolean} hasRootCastAuthors Include users who posted the root cast in the channel
     * @param {boolean} [hasCastLikers] Include users who liked a cast in the channel
     * @param {boolean} [hasCastRecasters] Include users who recasted a cast in the channel
     * @param {boolean} [hasReplyAuthors] Include users who replied to a cast in the channel
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelUsers(apiKey: string, id: string, hasRootCastAuthors: boolean, hasCastLikers?: boolean, hasCastRecasters?: boolean, hasReplyAuthors?: boolean, cursor?: string, limit?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UsersResponse, any>>;
    /**
     * Returns a list of all channels with their details
     * @summary Retrieve all channels with their details
     * @param {string} apiKey API key required for authentication.
     * @param {number} [limit] Number of results to retrieve (default 25, max 50)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    listAllChannels(apiKey: string, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ChannelListResponse, any>>;
    /**
     * Returns a list of channels based on id or name
     * @summary Search for channels based on id or name
     * @param {string} apiKey API key required for authentication.
     * @param {string} q Channel ID or name for the channel being queried
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    searchChannels(apiKey: string, q: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ChannelSearchResponse, any>>;
    /**
     * Returns a list of trending channels based on activity
     * @summary Retrieve trending channels based on activity
     * @param {string} apiKey API key required for authentication.
     * @param {'1d' | '7d' | '30d'} [timeWindow]
     * @param {number} [limit] Number of results to retrieve (default 10, max 25)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    trendingChannels(apiKey: string, timeWindow?: '1d' | '7d' | '30d', limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TrendingChannelResponse, any>>;
    /**
     * Returns a list of all channels with their details that a fid follows.
     * @summary Retrieve all channels that a given fid follows
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid The fid of the user.
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    userChannels(apiKey: string, fid: number, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ChannelListResponse, any>>;
}
