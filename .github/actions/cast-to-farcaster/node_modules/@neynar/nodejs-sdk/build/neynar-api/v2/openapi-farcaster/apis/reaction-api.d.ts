/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { OperationResponse } from '../models';
import { ReactionReqBody } from '../models';
import { ReactionsCastResponse } from '../models';
import { ReactionsResponse } from '../models';
import { ReactionsType } from '../models';
/**
 * ReactionApi - axios parameter creator
 * @export
 */
export declare const ReactionApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete a reaction (like or recast) to a given cast \\ (In order to delete a reaction `signer_uuid` must be approved)
     * @summary Delete a reaction
     * @param {string} apiKey API key required for authentication.
     * @param {ReactionReqBody} reactionReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReaction: (apiKey: string, reactionReqBody: ReactionReqBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Post a reaction (like or recast) to a given cast \\ (In order to post a reaction `signer_uuid` must be approved)
     * @summary Posts a reaction
     * @param {string} apiKey API key required for authentication.
     * @param {ReactionReqBody} reactionReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postReaction: (apiKey: string, reactionReqBody: ReactionReqBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches reactions for a given cast
     * @summary Fetches reactions for a given cast
     * @param {string} apiKey API key required for authentication.
     * @param {string} hash
     * @param {string} types Customize which reaction types the request should search for. This is a comma-separated string that can include the following values: \&#39;likes\&#39; and \&#39;recasts\&#39;. By default api returns both. To select multiple types, use a comma-separated list of these values.
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reactionsCast: (apiKey: string, hash: string, types: string, limit?: number, cursor?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches reactions for a given user
     * @summary Fetches reactions for a given user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid
     * @param {ReactionsType} type Type of reaction to fetch (likes or recasts or all)
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reactionsUser: (apiKey: string, fid: number, type: ReactionsType, limit?: number, cursor?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ReactionApi - functional programming interface
 * @export
 */
export declare const ReactionApiFp: (configuration?: Configuration) => {
    /**
     * Delete a reaction (like or recast) to a given cast \\ (In order to delete a reaction `signer_uuid` must be approved)
     * @summary Delete a reaction
     * @param {string} apiKey API key required for authentication.
     * @param {ReactionReqBody} reactionReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReaction(apiKey: string, reactionReqBody: ReactionReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationResponse>>;
    /**
     * Post a reaction (like or recast) to a given cast \\ (In order to post a reaction `signer_uuid` must be approved)
     * @summary Posts a reaction
     * @param {string} apiKey API key required for authentication.
     * @param {ReactionReqBody} reactionReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postReaction(apiKey: string, reactionReqBody: ReactionReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationResponse>>;
    /**
     * Fetches reactions for a given cast
     * @summary Fetches reactions for a given cast
     * @param {string} apiKey API key required for authentication.
     * @param {string} hash
     * @param {string} types Customize which reaction types the request should search for. This is a comma-separated string that can include the following values: \&#39;likes\&#39; and \&#39;recasts\&#39;. By default api returns both. To select multiple types, use a comma-separated list of these values.
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reactionsCast(apiKey: string, hash: string, types: string, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReactionsCastResponse>>;
    /**
     * Fetches reactions for a given user
     * @summary Fetches reactions for a given user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid
     * @param {ReactionsType} type Type of reaction to fetch (likes or recasts or all)
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reactionsUser(apiKey: string, fid: number, type: ReactionsType, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReactionsResponse>>;
};
/**
 * ReactionApi - factory interface
 * @export
 */
export declare const ReactionApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete a reaction (like or recast) to a given cast \\ (In order to delete a reaction `signer_uuid` must be approved)
     * @summary Delete a reaction
     * @param {string} apiKey API key required for authentication.
     * @param {ReactionReqBody} reactionReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReaction(apiKey: string, reactionReqBody: ReactionReqBody, options?: any): AxiosPromise<OperationResponse>;
    /**
     * Post a reaction (like or recast) to a given cast \\ (In order to post a reaction `signer_uuid` must be approved)
     * @summary Posts a reaction
     * @param {string} apiKey API key required for authentication.
     * @param {ReactionReqBody} reactionReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postReaction(apiKey: string, reactionReqBody: ReactionReqBody, options?: any): AxiosPromise<OperationResponse>;
    /**
     * Fetches reactions for a given cast
     * @summary Fetches reactions for a given cast
     * @param {string} apiKey API key required for authentication.
     * @param {string} hash
     * @param {string} types Customize which reaction types the request should search for. This is a comma-separated string that can include the following values: \&#39;likes\&#39; and \&#39;recasts\&#39;. By default api returns both. To select multiple types, use a comma-separated list of these values.
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reactionsCast(apiKey: string, hash: string, types: string, limit?: number, cursor?: string, options?: any): AxiosPromise<ReactionsCastResponse>;
    /**
     * Fetches reactions for a given user
     * @summary Fetches reactions for a given user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid
     * @param {ReactionsType} type Type of reaction to fetch (likes or recasts or all)
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reactionsUser(apiKey: string, fid: number, type: ReactionsType, limit?: number, cursor?: string, options?: any): AxiosPromise<ReactionsResponse>;
};
/**
 * ReactionApi - object-oriented interface
 * @export
 * @class ReactionApi
 * @extends {BaseAPI}
 */
export declare class ReactionApi extends BaseAPI {
    /**
     * Delete a reaction (like or recast) to a given cast \\ (In order to delete a reaction `signer_uuid` must be approved)
     * @summary Delete a reaction
     * @param {string} apiKey API key required for authentication.
     * @param {ReactionReqBody} reactionReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionApi
     */
    deleteReaction(apiKey: string, reactionReqBody: ReactionReqBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OperationResponse, any>>;
    /**
     * Post a reaction (like or recast) to a given cast \\ (In order to post a reaction `signer_uuid` must be approved)
     * @summary Posts a reaction
     * @param {string} apiKey API key required for authentication.
     * @param {ReactionReqBody} reactionReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionApi
     */
    postReaction(apiKey: string, reactionReqBody: ReactionReqBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OperationResponse, any>>;
    /**
     * Fetches reactions for a given cast
     * @summary Fetches reactions for a given cast
     * @param {string} apiKey API key required for authentication.
     * @param {string} hash
     * @param {string} types Customize which reaction types the request should search for. This is a comma-separated string that can include the following values: \&#39;likes\&#39; and \&#39;recasts\&#39;. By default api returns both. To select multiple types, use a comma-separated list of these values.
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionApi
     */
    reactionsCast(apiKey: string, hash: string, types: string, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ReactionsCastResponse, any>>;
    /**
     * Fetches reactions for a given user
     * @summary Fetches reactions for a given user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid
     * @param {ReactionsType} type Type of reaction to fetch (likes or recasts or all)
     * @param {number} [limit] Number of results to retrieve (default 25, max 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionApi
     */
    reactionsUser(apiKey: string, fid: number, type: ReactionsType, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ReactionsResponse, any>>;
}
