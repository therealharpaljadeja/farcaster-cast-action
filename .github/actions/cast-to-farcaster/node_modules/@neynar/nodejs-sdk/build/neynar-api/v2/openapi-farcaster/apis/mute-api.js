"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MuteApi = exports.MuteApiFactory = exports.MuteApiFp = exports.MuteApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * MuteApi - axios parameter creator
 * @export
 */
const MuteApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Adds a mute for a given fid. This is a whitelisted API, reach out if you want access.
         * @summary Adds a mute for a fid.
         * @param {string} apiKey API key required for authentication.
         * @param {MuteReqBody} muteReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMute: async (apiKey, muteReqBody, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('addMute', 'apiKey', apiKey);
            // verify required parameter 'muteReqBody' is not null or undefined
            (0, common_1.assertParamExists)('addMute', 'muteReqBody', muteReqBody);
            const localVarPath = `/farcaster/mute`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(muteReqBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a mute for a given fid. This is a whitelisted API, reach out if you want access.
         * @summary Deletes a mute for a fid.
         * @param {string} apiKey API key required for authentication.
         * @param {MuteReqBody} muteReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMute: async (apiKey, muteReqBody, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('deleteMute', 'apiKey', apiKey);
            // verify required parameter 'muteReqBody' is not null or undefined
            (0, common_1.assertParamExists)('deleteMute', 'muteReqBody', muteReqBody);
            const localVarPath = `/farcaster/mute`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(muteReqBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches all fids that a user has muted.
         * @summary Get fids that a user has muted.
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid The user\&#39;s fid (identifier)
         * @param {number} [limit] Number of results to retrieve (default 20, max 100).
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        muteList: async (apiKey, fid, limit, cursor, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('muteList', 'apiKey', apiKey);
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('muteList', 'fid', fid);
            const localVarPath = `/farcaster/mute/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.MuteApiAxiosParamCreator = MuteApiAxiosParamCreator;
/**
 * MuteApi - functional programming interface
 * @export
 */
const MuteApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.MuteApiAxiosParamCreator)(configuration);
    return {
        /**
         * Adds a mute for a given fid. This is a whitelisted API, reach out if you want access.
         * @summary Adds a mute for a fid.
         * @param {string} apiKey API key required for authentication.
         * @param {MuteReqBody} muteReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMute(apiKey, muteReqBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMute(apiKey, muteReqBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Deletes a mute for a given fid. This is a whitelisted API, reach out if you want access.
         * @summary Deletes a mute for a fid.
         * @param {string} apiKey API key required for authentication.
         * @param {MuteReqBody} muteReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMute(apiKey, muteReqBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMute(apiKey, muteReqBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Fetches all fids that a user has muted.
         * @summary Get fids that a user has muted.
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid The user\&#39;s fid (identifier)
         * @param {number} [limit] Number of results to retrieve (default 20, max 100).
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async muteList(apiKey, fid, limit, cursor, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.muteList(apiKey, fid, limit, cursor, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.MuteApiFp = MuteApiFp;
/**
 * MuteApi - factory interface
 * @export
 */
const MuteApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.MuteApiFp)(configuration);
    return {
        /**
         * Adds a mute for a given fid. This is a whitelisted API, reach out if you want access.
         * @summary Adds a mute for a fid.
         * @param {string} apiKey API key required for authentication.
         * @param {MuteReqBody} muteReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMute(apiKey, muteReqBody, options) {
            return localVarFp.addMute(apiKey, muteReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a mute for a given fid. This is a whitelisted API, reach out if you want access.
         * @summary Deletes a mute for a fid.
         * @param {string} apiKey API key required for authentication.
         * @param {MuteReqBody} muteReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMute(apiKey, muteReqBody, options) {
            return localVarFp.deleteMute(apiKey, muteReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches all fids that a user has muted.
         * @summary Get fids that a user has muted.
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid The user\&#39;s fid (identifier)
         * @param {number} [limit] Number of results to retrieve (default 20, max 100).
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        muteList(apiKey, fid, limit, cursor, options) {
            return localVarFp.muteList(apiKey, fid, limit, cursor, options).then((request) => request(axios, basePath));
        },
    };
};
exports.MuteApiFactory = MuteApiFactory;
/**
 * MuteApi - object-oriented interface
 * @export
 * @class MuteApi
 * @extends {BaseAPI}
 */
class MuteApi extends base_1.BaseAPI {
    /**
     * Adds a mute for a given fid. This is a whitelisted API, reach out if you want access.
     * @summary Adds a mute for a fid.
     * @param {string} apiKey API key required for authentication.
     * @param {MuteReqBody} muteReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MuteApi
     */
    addMute(apiKey, muteReqBody, options) {
        return (0, exports.MuteApiFp)(this.configuration).addMute(apiKey, muteReqBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a mute for a given fid. This is a whitelisted API, reach out if you want access.
     * @summary Deletes a mute for a fid.
     * @param {string} apiKey API key required for authentication.
     * @param {MuteReqBody} muteReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MuteApi
     */
    deleteMute(apiKey, muteReqBody, options) {
        return (0, exports.MuteApiFp)(this.configuration).deleteMute(apiKey, muteReqBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches all fids that a user has muted.
     * @summary Get fids that a user has muted.
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid The user\&#39;s fid (identifier)
     * @param {number} [limit] Number of results to retrieve (default 20, max 100).
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MuteApi
     */
    muteList(apiKey, fid, limit, cursor, options) {
        return (0, exports.MuteApiFp)(this.configuration).muteList(apiKey, fid, limit, cursor, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.MuteApi = MuteApi;
