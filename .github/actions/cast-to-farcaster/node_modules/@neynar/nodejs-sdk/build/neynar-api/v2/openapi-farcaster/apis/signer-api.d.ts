/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/base';
import { AuthorizationUrlResponse } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/models';
import { AuthorizationUrlResponseType } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/models';
import { DeveloperManagedSigner } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/models';
import { RegisterDeveloperManagedSignedKeyReqBody } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/models';
import { RegisterSignerKeyReqBody } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/models';
import { Signer } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/models';
/**
 * SignerApi - axios parameter creator
 * @export
 */
export declare const SignerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a signer and returns the signer status. \\ **Note**: While tesing please reuse the signer, it costs money to approve a signer.
     * @summary Creates a signer and returns the signer status
     * @param {string} apiKey API key required for authentication.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSigner: (apiKey: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches the status of a developer managed signer by public key
     * @summary Fetches the status of a signer by public key
     * @param {string} apiKey API key required for authentication.
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    developerManagedSigner: (apiKey: string, publicKey: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch authorization url (Fetched authorized url useful for SIWN login operation)
     * @summary Fetch authorization url
     * @param {string} apiKey API key required for authentication.
     * @param {string} clientId
     * @param {AuthorizationUrlResponseType} responseType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchAuthorizationUrl: (apiKey: string, clientId: string, responseType: AuthorizationUrlResponseType, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
     * @summary Publish a message to farcaster
     * @param {string} apiKey API key required for authentication.
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishMessage: (apiKey: string, body: object, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Registers an app fid, deadline and a signature. Returns the signer status with an approval url.
     * @summary Register Signed Key
     * @param {string} apiKey API key required for authentication.
     * @param {RegisterSignerKeyReqBody} registerSignerKeyReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerSignedKey: (apiKey: string, registerSignerKeyReqBody: RegisterSignerKeyReqBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Registers an signed key and returns the developer managed signer status with an approval url.
     * @summary Registers Signed Key
     * @param {string} apiKey API key required for authentication.
     * @param {RegisterDeveloperManagedSignedKeyReqBody} registerDeveloperManagedSignedKeyReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerSignedKeyForDeveloperManagedSigner: (apiKey: string, registerDeveloperManagedSignedKeyReqBody: RegisterDeveloperManagedSignedKeyReqBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
     * @summary Fetches the status of a signer
     * @param {string} apiKey API key required for authentication.
     * @param {string} signerUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signer: (apiKey: string, signerUuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SignerApi - functional programming interface
 * @export
 */
export declare const SignerApiFp: (configuration?: Configuration) => {
    /**
     * Creates a signer and returns the signer status. \\ **Note**: While tesing please reuse the signer, it costs money to approve a signer.
     * @summary Creates a signer and returns the signer status
     * @param {string} apiKey API key required for authentication.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSigner(apiKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signer>>;
    /**
     * Fetches the status of a developer managed signer by public key
     * @summary Fetches the status of a signer by public key
     * @param {string} apiKey API key required for authentication.
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    developerManagedSigner(apiKey: string, publicKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeveloperManagedSigner>>;
    /**
     * Fetch authorization url (Fetched authorized url useful for SIWN login operation)
     * @summary Fetch authorization url
     * @param {string} apiKey API key required for authentication.
     * @param {string} clientId
     * @param {AuthorizationUrlResponseType} responseType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchAuthorizationUrl(apiKey: string, clientId: string, responseType: AuthorizationUrlResponseType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizationUrlResponse>>;
    /**
     * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
     * @summary Publish a message to farcaster
     * @param {string} apiKey API key required for authentication.
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishMessage(apiKey: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Registers an app fid, deadline and a signature. Returns the signer status with an approval url.
     * @summary Register Signed Key
     * @param {string} apiKey API key required for authentication.
     * @param {RegisterSignerKeyReqBody} registerSignerKeyReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerSignedKey(apiKey: string, registerSignerKeyReqBody: RegisterSignerKeyReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signer>>;
    /**
     * Registers an signed key and returns the developer managed signer status with an approval url.
     * @summary Registers Signed Key
     * @param {string} apiKey API key required for authentication.
     * @param {RegisterDeveloperManagedSignedKeyReqBody} registerDeveloperManagedSignedKeyReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerSignedKeyForDeveloperManagedSigner(apiKey: string, registerDeveloperManagedSignedKeyReqBody: RegisterDeveloperManagedSignedKeyReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeveloperManagedSigner>>;
    /**
     * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
     * @summary Fetches the status of a signer
     * @param {string} apiKey API key required for authentication.
     * @param {string} signerUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signer(apiKey: string, signerUuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signer>>;
};
/**
 * SignerApi - factory interface
 * @export
 */
export declare const SignerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a signer and returns the signer status. \\ **Note**: While tesing please reuse the signer, it costs money to approve a signer.
     * @summary Creates a signer and returns the signer status
     * @param {string} apiKey API key required for authentication.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSigner(apiKey: string, options?: any): AxiosPromise<Signer>;
    /**
     * Fetches the status of a developer managed signer by public key
     * @summary Fetches the status of a signer by public key
     * @param {string} apiKey API key required for authentication.
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    developerManagedSigner(apiKey: string, publicKey: string, options?: any): AxiosPromise<DeveloperManagedSigner>;
    /**
     * Fetch authorization url (Fetched authorized url useful for SIWN login operation)
     * @summary Fetch authorization url
     * @param {string} apiKey API key required for authentication.
     * @param {string} clientId
     * @param {AuthorizationUrlResponseType} responseType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchAuthorizationUrl(apiKey: string, clientId: string, responseType: AuthorizationUrlResponseType, options?: any): AxiosPromise<AuthorizationUrlResponse>;
    /**
     * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
     * @summary Publish a message to farcaster
     * @param {string} apiKey API key required for authentication.
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishMessage(apiKey: string, body: object, options?: any): AxiosPromise<object>;
    /**
     * Registers an app fid, deadline and a signature. Returns the signer status with an approval url.
     * @summary Register Signed Key
     * @param {string} apiKey API key required for authentication.
     * @param {RegisterSignerKeyReqBody} registerSignerKeyReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerSignedKey(apiKey: string, registerSignerKeyReqBody: RegisterSignerKeyReqBody, options?: any): AxiosPromise<Signer>;
    /**
     * Registers an signed key and returns the developer managed signer status with an approval url.
     * @summary Registers Signed Key
     * @param {string} apiKey API key required for authentication.
     * @param {RegisterDeveloperManagedSignedKeyReqBody} registerDeveloperManagedSignedKeyReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerSignedKeyForDeveloperManagedSigner(apiKey: string, registerDeveloperManagedSignedKeyReqBody: RegisterDeveloperManagedSignedKeyReqBody, options?: any): AxiosPromise<DeveloperManagedSigner>;
    /**
     * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
     * @summary Fetches the status of a signer
     * @param {string} apiKey API key required for authentication.
     * @param {string} signerUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signer(apiKey: string, signerUuid: string, options?: any): AxiosPromise<Signer>;
};
/**
 * SignerApi - object-oriented interface
 * @export
 * @class SignerApi
 * @extends {BaseAPI}
 */
export declare class SignerApi extends BaseAPI {
    /**
     * Creates a signer and returns the signer status. \\ **Note**: While tesing please reuse the signer, it costs money to approve a signer.
     * @summary Creates a signer and returns the signer status
     * @param {string} apiKey API key required for authentication.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     */
    createSigner(apiKey: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Signer, any>>;
    /**
     * Fetches the status of a developer managed signer by public key
     * @summary Fetches the status of a signer by public key
     * @param {string} apiKey API key required for authentication.
     * @param {string} publicKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     */
    developerManagedSigner(apiKey: string, publicKey: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeveloperManagedSigner, any>>;
    /**
     * Fetch authorization url (Fetched authorized url useful for SIWN login operation)
     * @summary Fetch authorization url
     * @param {string} apiKey API key required for authentication.
     * @param {string} clientId
     * @param {AuthorizationUrlResponseType} responseType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     */
    fetchAuthorizationUrl(apiKey: string, clientId: string, responseType: AuthorizationUrlResponseType, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthorizationUrlResponse, any>>;
    /**
     * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
     * @summary Publish a message to farcaster
     * @param {string} apiKey API key required for authentication.
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     */
    publishMessage(apiKey: string, body: object, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Registers an app fid, deadline and a signature. Returns the signer status with an approval url.
     * @summary Register Signed Key
     * @param {string} apiKey API key required for authentication.
     * @param {RegisterSignerKeyReqBody} registerSignerKeyReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     */
    registerSignedKey(apiKey: string, registerSignerKeyReqBody: RegisterSignerKeyReqBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Signer, any>>;
    /**
     * Registers an signed key and returns the developer managed signer status with an approval url.
     * @summary Registers Signed Key
     * @param {string} apiKey API key required for authentication.
     * @param {RegisterDeveloperManagedSignedKeyReqBody} registerDeveloperManagedSignedKeyReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     */
    registerSignedKeyForDeveloperManagedSigner(apiKey: string, registerDeveloperManagedSignedKeyReqBody: RegisterDeveloperManagedSignedKeyReqBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeveloperManagedSigner, any>>;
    /**
     * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
     * @summary Fetches the status of a signer
     * @param {string} apiKey API key required for authentication.
     * @param {string} signerUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     */
    signer(apiKey: string, signerUuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Signer, any>>;
}
