"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationsApi = exports.NotificationsApiFactory = exports.NotificationsApiFp = exports.NotificationsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * NotificationsApi - axios parameter creator
 * @export
 */
const NotificationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns a list of notifications for a specific FID.
         * @summary Retrieve notifications for a given user
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid FID of the user you you want to fetch notifications for
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifications: async (apiKey, fid, cursor, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('notifications', 'apiKey', apiKey);
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('notifications', 'fid', fid);
            const localVarPath = `/farcaster/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of notifications for a user in specific channels
         * @summary Retrieve notifications for a user in given channels
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid FID of the user you you want to fetch notifications for
         * @param {string} channelIds Comma separated channel_ids (find list of all channels here - https://docs.neynar.com/reference/list-all-channels)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsChannel: async (apiKey, fid, channelIds, cursor, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('notificationsChannel', 'apiKey', apiKey);
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('notificationsChannel', 'fid', fid);
            // verify required parameter 'channelIds' is not null or undefined
            (0, common_1.assertParamExists)('notificationsChannel', 'channelIds', channelIds);
            const localVarPath = `/farcaster/notifications/channel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (channelIds !== undefined) {
                localVarQueryParameter['channel_ids'] = channelIds;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of notifications for a user in specific parent_urls
         * @summary Retrieve notifications for a user in given parent_urls
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid FID of the user you you want to fetch notifications for
         * @param {string} parentUrls Comma separated parent_urls
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsParentUrl: async (apiKey, fid, parentUrls, cursor, options = {}) => {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('notificationsParentUrl', 'apiKey', apiKey);
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('notificationsParentUrl', 'fid', fid);
            // verify required parameter 'parentUrls' is not null or undefined
            (0, common_1.assertParamExists)('notificationsParentUrl', 'parentUrls', parentUrls);
            const localVarPath = `/farcaster/notifications/parent_url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (parentUrls !== undefined) {
                localVarQueryParameter['parent_urls'] = parentUrls;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.NotificationsApiAxiosParamCreator = NotificationsApiAxiosParamCreator;
/**
 * NotificationsApi - functional programming interface
 * @export
 */
const NotificationsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.NotificationsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Returns a list of notifications for a specific FID.
         * @summary Retrieve notifications for a given user
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid FID of the user you you want to fetch notifications for
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notifications(apiKey, fid, cursor, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notifications(apiKey, fid, cursor, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Returns a list of notifications for a user in specific channels
         * @summary Retrieve notifications for a user in given channels
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid FID of the user you you want to fetch notifications for
         * @param {string} channelIds Comma separated channel_ids (find list of all channels here - https://docs.neynar.com/reference/list-all-channels)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationsChannel(apiKey, fid, channelIds, cursor, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationsChannel(apiKey, fid, channelIds, cursor, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Returns a list of notifications for a user in specific parent_urls
         * @summary Retrieve notifications for a user in given parent_urls
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid FID of the user you you want to fetch notifications for
         * @param {string} parentUrls Comma separated parent_urls
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationsParentUrl(apiKey, fid, parentUrls, cursor, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationsParentUrl(apiKey, fid, parentUrls, cursor, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.NotificationsApiFp = NotificationsApiFp;
/**
 * NotificationsApi - factory interface
 * @export
 */
const NotificationsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.NotificationsApiFp)(configuration);
    return {
        /**
         * Returns a list of notifications for a specific FID.
         * @summary Retrieve notifications for a given user
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid FID of the user you you want to fetch notifications for
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifications(apiKey, fid, cursor, options) {
            return localVarFp.notifications(apiKey, fid, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of notifications for a user in specific channels
         * @summary Retrieve notifications for a user in given channels
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid FID of the user you you want to fetch notifications for
         * @param {string} channelIds Comma separated channel_ids (find list of all channels here - https://docs.neynar.com/reference/list-all-channels)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsChannel(apiKey, fid, channelIds, cursor, options) {
            return localVarFp.notificationsChannel(apiKey, fid, channelIds, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of notifications for a user in specific parent_urls
         * @summary Retrieve notifications for a user in given parent_urls
         * @param {string} apiKey API key required for authentication.
         * @param {number} fid FID of the user you you want to fetch notifications for
         * @param {string} parentUrls Comma separated parent_urls
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsParentUrl(apiKey, fid, parentUrls, cursor, options) {
            return localVarFp.notificationsParentUrl(apiKey, fid, parentUrls, cursor, options).then((request) => request(axios, basePath));
        },
    };
};
exports.NotificationsApiFactory = NotificationsApiFactory;
/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
class NotificationsApi extends base_1.BaseAPI {
    /**
     * Returns a list of notifications for a specific FID.
     * @summary Retrieve notifications for a given user
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid FID of the user you you want to fetch notifications for
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    notifications(apiKey, fid, cursor, options) {
        return (0, exports.NotificationsApiFp)(this.configuration).notifications(apiKey, fid, cursor, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of notifications for a user in specific channels
     * @summary Retrieve notifications for a user in given channels
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid FID of the user you you want to fetch notifications for
     * @param {string} channelIds Comma separated channel_ids (find list of all channels here - https://docs.neynar.com/reference/list-all-channels)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    notificationsChannel(apiKey, fid, channelIds, cursor, options) {
        return (0, exports.NotificationsApiFp)(this.configuration).notificationsChannel(apiKey, fid, channelIds, cursor, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of notifications for a user in specific parent_urls
     * @summary Retrieve notifications for a user in given parent_urls
     * @param {string} apiKey API key required for authentication.
     * @param {number} fid FID of the user you you want to fetch notifications for
     * @param {string} parentUrls Comma separated parent_urls
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    notificationsParentUrl(apiKey, fid, parentUrls, cursor, options) {
        return (0, exports.NotificationsApiFp)(this.configuration).notificationsParentUrl(apiKey, fid, parentUrls, cursor, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.NotificationsApi = NotificationsApi;
