/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/base';
import { WebhookDeleteReqBody } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/models';
import { WebhookListResponse } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/models';
import { WebhookPatchReqBody } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/models';
import { WebhookPostReqBody } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/models';
import { WebhookPutReqBody } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/models';
import { WebhookResponse } from '@neynar/nodejs-sdk/build/neynar-api/v2/openapi-farcaster/models';
/**
 * WebhookApi - axios parameter creator
 * @export
 */
export declare const WebhookApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete a webhook
     * @summary Delete a webhook
     * @param {string} apiKey API key required for authentication.
     * @param {WebhookDeleteReqBody} webhookDeleteReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWebhook: (apiKey: string, webhookDeleteReqBody: WebhookDeleteReqBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch a list of webhooks associated to a user
     * @summary Fetch a list of webhooks associated to a user
     * @param {string} apiKey API key required for authentication.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchWebhooks: (apiKey: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch a webhook
     * @summary Fetch a webhook
     * @param {string} apiKey API key required for authentication.
     * @param {string} webhookId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookupWebhook: (apiKey: string, webhookId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a webhook
     * @summary Create a webhook
     * @param {string} apiKey API key required for authentication.
     * @param {WebhookPostReqBody} webhookPostReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishWebhook: (apiKey: string, webhookPostReqBody: WebhookPostReqBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a webhook
     * @summary Update a webhook
     * @param {string} apiKey API key required for authentication.
     * @param {WebhookPutReqBody} webhookPutReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWebhook: (apiKey: string, webhookPutReqBody: WebhookPutReqBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update webhook active status
     * @summary Update webhook active status
     * @param {string} apiKey API key required for authentication.
     * @param {WebhookPatchReqBody} webhookPatchReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWebhookActiveStatus: (apiKey: string, webhookPatchReqBody: WebhookPatchReqBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WebhookApi - functional programming interface
 * @export
 */
export declare const WebhookApiFp: (configuration?: Configuration) => {
    /**
     * Delete a webhook
     * @summary Delete a webhook
     * @param {string} apiKey API key required for authentication.
     * @param {WebhookDeleteReqBody} webhookDeleteReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWebhook(apiKey: string, webhookDeleteReqBody: WebhookDeleteReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookResponse>>;
    /**
     * Fetch a list of webhooks associated to a user
     * @summary Fetch a list of webhooks associated to a user
     * @param {string} apiKey API key required for authentication.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchWebhooks(apiKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookListResponse>>;
    /**
     * Fetch a webhook
     * @summary Fetch a webhook
     * @param {string} apiKey API key required for authentication.
     * @param {string} webhookId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookupWebhook(apiKey: string, webhookId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookResponse>>;
    /**
     * Create a webhook
     * @summary Create a webhook
     * @param {string} apiKey API key required for authentication.
     * @param {WebhookPostReqBody} webhookPostReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishWebhook(apiKey: string, webhookPostReqBody: WebhookPostReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookResponse>>;
    /**
     * Update a webhook
     * @summary Update a webhook
     * @param {string} apiKey API key required for authentication.
     * @param {WebhookPutReqBody} webhookPutReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWebhook(apiKey: string, webhookPutReqBody: WebhookPutReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookResponse>>;
    /**
     * Update webhook active status
     * @summary Update webhook active status
     * @param {string} apiKey API key required for authentication.
     * @param {WebhookPatchReqBody} webhookPatchReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWebhookActiveStatus(apiKey: string, webhookPatchReqBody: WebhookPatchReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookResponse>>;
};
/**
 * WebhookApi - factory interface
 * @export
 */
export declare const WebhookApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete a webhook
     * @summary Delete a webhook
     * @param {string} apiKey API key required for authentication.
     * @param {WebhookDeleteReqBody} webhookDeleteReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWebhook(apiKey: string, webhookDeleteReqBody: WebhookDeleteReqBody, options?: any): AxiosPromise<WebhookResponse>;
    /**
     * Fetch a list of webhooks associated to a user
     * @summary Fetch a list of webhooks associated to a user
     * @param {string} apiKey API key required for authentication.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchWebhooks(apiKey: string, options?: any): AxiosPromise<WebhookListResponse>;
    /**
     * Fetch a webhook
     * @summary Fetch a webhook
     * @param {string} apiKey API key required for authentication.
     * @param {string} webhookId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookupWebhook(apiKey: string, webhookId: string, options?: any): AxiosPromise<WebhookResponse>;
    /**
     * Create a webhook
     * @summary Create a webhook
     * @param {string} apiKey API key required for authentication.
     * @param {WebhookPostReqBody} webhookPostReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishWebhook(apiKey: string, webhookPostReqBody: WebhookPostReqBody, options?: any): AxiosPromise<WebhookResponse>;
    /**
     * Update a webhook
     * @summary Update a webhook
     * @param {string} apiKey API key required for authentication.
     * @param {WebhookPutReqBody} webhookPutReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWebhook(apiKey: string, webhookPutReqBody: WebhookPutReqBody, options?: any): AxiosPromise<WebhookResponse>;
    /**
     * Update webhook active status
     * @summary Update webhook active status
     * @param {string} apiKey API key required for authentication.
     * @param {WebhookPatchReqBody} webhookPatchReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWebhookActiveStatus(apiKey: string, webhookPatchReqBody: WebhookPatchReqBody, options?: any): AxiosPromise<WebhookResponse>;
};
/**
 * WebhookApi - object-oriented interface
 * @export
 * @class WebhookApi
 * @extends {BaseAPI}
 */
export declare class WebhookApi extends BaseAPI {
    /**
     * Delete a webhook
     * @summary Delete a webhook
     * @param {string} apiKey API key required for authentication.
     * @param {WebhookDeleteReqBody} webhookDeleteReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    deleteWebhook(apiKey: string, webhookDeleteReqBody: WebhookDeleteReqBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WebhookResponse, any>>;
    /**
     * Fetch a list of webhooks associated to a user
     * @summary Fetch a list of webhooks associated to a user
     * @param {string} apiKey API key required for authentication.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    fetchWebhooks(apiKey: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WebhookListResponse, any>>;
    /**
     * Fetch a webhook
     * @summary Fetch a webhook
     * @param {string} apiKey API key required for authentication.
     * @param {string} webhookId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    lookupWebhook(apiKey: string, webhookId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WebhookResponse, any>>;
    /**
     * Create a webhook
     * @summary Create a webhook
     * @param {string} apiKey API key required for authentication.
     * @param {WebhookPostReqBody} webhookPostReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    publishWebhook(apiKey: string, webhookPostReqBody: WebhookPostReqBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WebhookResponse, any>>;
    /**
     * Update a webhook
     * @summary Update a webhook
     * @param {string} apiKey API key required for authentication.
     * @param {WebhookPutReqBody} webhookPutReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    updateWebhook(apiKey: string, webhookPutReqBody: WebhookPutReqBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WebhookResponse, any>>;
    /**
     * Update webhook active status
     * @summary Update webhook active status
     * @param {string} apiKey API key required for authentication.
     * @param {WebhookPatchReqBody} webhookPatchReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    updateWebhookActiveStatus(apiKey: string, webhookPatchReqBody: WebhookPatchReqBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WebhookResponse, any>>;
}
